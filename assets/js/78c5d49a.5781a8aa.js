"use strict";(self.webpackChunkdocument=self.webpackChunkdocument||[]).push([[464],{5518:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"contributors/monorepo-setup","title":"Monorepo Setup Guide","description":"This guide explains how to set up and manage a monorepo using pnpm workspaces, Turborepo, and Changesets.","source":"@site/docs/contributors/monorepo-setup.md","sourceDirName":"contributors","slug":"/contributors/monorepo-setup","permalink":"/PivotHead/docs/contributors/monorepo-setup","draft":false,"unlisted":false,"editUrl":"https://github.com/mindfiredigital/PivotHead/tree/main/documentation/docs/contributors/monorepo-setup.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Code of conduct","permalink":"/PivotHead/docs/contributors/code-of-conduct"},"next":{"title":"Quick Start Guide","permalink":"/PivotHead/docs/contributors/quick-start"}}');var t=s(4848),a=s(8453);const o={sidebar_position:3},c="Monorepo Setup Guide",r={},l=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"Package Management with pnpm",id:"package-management-with-pnpm",level:2},{value:"Setting Up pnpm Workspaces",id:"setting-up-pnpm-workspaces",level:3},{value:"Installing Dependencies",id:"installing-dependencies",level:3},{value:"Build System with Turborepo",id:"build-system-with-turborepo",level:2},{value:"Configuring Turborepo",id:"configuring-turborepo",level:3},{value:"Running Tasks",id:"running-tasks",level:3},{value:"Version Management with Changesets",id:"version-management-with-changesets",level:2},{value:"Setup Changesets",id:"setup-changesets",level:3},{value:"Managing Versions",id:"managing-versions",level:3},{value:"Commit Lint Configuration",id:"commit-lint-configuration",level:3},{value:"Continuous Integration",id:"continuous-integration",level:2},{value:"GitHub Actions Workflow",id:"github-actions-workflow",level:3},{value:"Automatic Changeset Generation",id:"automatic-changeset-generation",level:3},{value:"Common Commands",id:"common-commands",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Additional Resources",id:"additional-resources",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"monorepo-setup-guide",children:"Monorepo Setup Guide"})}),"\n",(0,t.jsx)(n.p,{children:"This guide explains how to set up and manage a monorepo using pnpm workspaces, Turborepo, and Changesets."}),"\n",(0,t.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#prerequisites",children:"Prerequisites"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#project-structure",children:"Project Structure"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#package-management-with-pnpm",children:"Package Management with pnpm"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#build-system-with-turborepo",children:"Build System with Turborepo"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#version-management-with-changesets",children:"Version Management with Changesets"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#continuous-integration",children:"Continuous Integration"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsx)(n.p,{children:"Before you begin, ensure you have the following installed:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Install Node.js (v12 or higher)\n# Install pnpm globally\nnpm install -g pnpm\n\n# Required package dependencies\npnpm add -D @changesets/changelog-github @changesets/cli @commitlint/cli @commitlint/config-conventional turbo\n"})}),"\n",(0,t.jsx)(n.p,{children:"These packages are essential for the monorepo setup:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@changesets/changelog-github"})," and ",(0,t.jsx)(n.code,{children:"@changesets/cli"})," manage version control and changelog generation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@commitlint/cli"})," and ",(0,t.jsx)(n.code,{children:"@commitlint/config-conventional"})," enforce commit message conventions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"turbo"})," provides the build system for managing dependencies between packages"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,t.jsx)(n.p,{children:"Our monorepo follows this structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"root/\n\u251c\u2500\u2500 .changeset/\n\u251c\u2500\u2500 .github/\n\u251c\u2500\u2500 packages/\n\u2502   \u251c\u2500\u2500 core/\n\u2502   \u251c\u2500\u2500 react/\n\u2502   \u251c\u2500\u2500 angular/\n\u2502   \u251c\u2500\u2500 vue/\n\u2502   \u2514\u2500\u2500 web-component/\n\u251c\u2500\u2500 examples/\n\u251c\u2500\u2500 documentation/\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 pnpm-workspace.yaml\n\u2514\u2500\u2500 turbo.json\n"})}),"\n",(0,t.jsx)(n.h2,{id:"package-management-with-pnpm",children:"Package Management with pnpm"}),"\n",(0,t.jsx)(n.h3,{id:"setting-up-pnpm-workspaces",children:"Setting Up pnpm Workspaces"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Create a ",(0,t.jsx)(n.code,{children:"pnpm-workspace.yaml"})," file in your root directory:"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"packages:\n  - 'packages/*'\n  - 'examples/*'\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsxs)(n.li,{children:["Configure your root ",(0,t.jsx)(n.code,{children:"package.json"}),":"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "name": "@mindfiredigital/pivothead-table",\n  "private": true,\n  "workspaces": ["packages/*", "examples/*"],\n  "scripts": {\n    "build": "turbo run lint && turbo run build",\n    "dev": "turbo run dev",\n    "lint": "turbo run lint",\n    "test": "turbo run test",\n    "clean": "turbo run clean && rm -rf node_modules",\n    "preinstall": "npx only-allow pnpm"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"installing-dependencies",children:"Installing Dependencies"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Install dependencies across all packages\npnpm install\n\n# Add a dependency to a specific package\npnpm add <package> --filter @mindfiredigital/package-core\n"})}),"\n",(0,t.jsx)(n.h2,{id:"build-system-with-turborepo",children:"Build System with Turborepo"}),"\n",(0,t.jsx)(n.h3,{id:"configuring-turborepo",children:"Configuring Turborepo"}),"\n",(0,t.jsxs)(n.p,{children:["Create a ",(0,t.jsx)(n.code,{children:"turbo.json"})," in your root directory:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "$schema": "https://turbo.build/schema.json",\n  "pipeline": {\n    "build": {\n      "dependsOn": ["^build"],\n      "outputs": ["dist/**"]\n    },\n    "test": {\n      "dependsOn": ["^build"],\n      "outputs": []\n    },\n    "lint": {\n      "outputs": []\n    },\n    "dev": {\n      "cache": false\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"running-tasks",children:"Running Tasks"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Build all packages\npnpm turbo run build\n\n# Build specific packages\npnpm turbo run build --filter=@mindfiredigital/package-core...\n"})}),"\n",(0,t.jsx)(n.h2,{id:"version-management-with-changesets",children:"Version Management with Changesets"}),"\n",(0,t.jsx)(n.h3,{id:"setup-changesets",children:"Setup Changesets"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Install changesets:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pnpm add -D @changesets/cli @changesets/changelog-github\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsxs)(n.li,{children:["Configure changesets in ",(0,t.jsx)(n.code,{children:".changeset/config.json"}),":"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "$schema": "https://unpkg.com/@changesets/config@3.0.5/schema.json",\n  "changelog": [\n    "@changesets/changelog-github",\n    { "repo": "mindfiredigital/Package" }\n  ],\n  "commit": false,\n  "fixed": [],\n  "linked": [],\n  "access": "public",\n  "baseBranch": "main",\n  "updateInternalDependencies": "patch",\n  "ignore": []\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"managing-versions",children:"Managing Versions"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Create a changeset:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pnpm changeset\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Commit format for automatic changeset generation:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# For new features\ngit commit -m "feat(core): add new table feature"\n\n# For bug fixes\ngit commit -m "fix(react): resolve rendering issue"\n\n# For breaking changes\ngit commit -m "BREAKING CHANGE: complete API redesign"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"commit-lint-configuration",children:"Commit Lint Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["We use commitlint to enforce commit message conventions. Here's our ",(0,t.jsx)(n.code,{children:"commitlint.config.cjs"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  extends: ['@commitlint/config-conventional'],\n  rules: {\n    'scope-enum': [\n      2,\n      'always',\n      ['core', 'react', 'web-component', 'angular', 'docs', 'release'],\n    ],\n    'scope-empty': [2, 'never'],\n    'scope-case': [2, 'always', 'lower-case'],\n  },\n  ignores: [message => message.includes('[skip-commitlint]')],\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"continuous-integration",children:"Continuous Integration"}),"\n",(0,t.jsx)(n.h3,{id:"github-actions-workflow",children:"GitHub Actions Workflow"}),"\n",(0,t.jsxs)(n.p,{children:["Our release workflow (",(0,t.jsx)(n.code,{children:".github/workflows/release.yml"}),") handles automatic versioning and publishing:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"name: Deployment Workflow PivotHead\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  build:\n    name: '@mindfiredigital/pivothead'\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n      packages: write\n      pull-requests: write\n      actions: write\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: 20\n\n      - name: Enable Corepack\n        run: npm install -g pnpm\n\n      - name: Install dependencies\n        run: pnpm install\n\n      - name: Build application\n        run: pnpm turbo run build\n\n      - name: Create Release Pull Request or Publish\n        uses: changesets/action@v1.4.1\n        with:\n          commit: 'chore(release): version packages'\n          title: 'chore(release): version packages'\n          version: node .github/changeset-version.js\n          publish: npx changeset publish\n        env:\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"automatic-changeset-generation",children:"Automatic Changeset Generation"}),"\n",(0,t.jsxs)(n.p,{children:["We use a custom script (",(0,t.jsx)(n.code,{children:".github/changeset-autogenerate.mjs"}),") to automatically generate changesets from commit messages:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// This script automatically creates changesets based on commit messages\nimport { execSync } from 'child_process';\nimport fs from 'fs';\n\n// Get the most recent commit message\nconst commitMessage = execSync('git log -1 --format=%s').toString().trim();\n\n// Define valid scopes\nconst validScopes = [\n  'core',\n  'react',\n  'angular',\n  'vue',\n  'svelte',\n  'web-component',\n];\n\n// Define regex patterns\nconst commitPatterns = {\n  major: /^BREAKING CHANGE: (.+)/,\n  minor: /^feat\\(([^)]+)\\): (.+)/,\n  patch: /^fix\\(([^)]+)\\): (.+)/,\n};\n\n// Identify type, package, and description\nlet packageScope = null;\nlet changeType = null;\nlet description = null;\n\nif (commitPatterns.major.test(commitMessage)) {\n  changeType = 'major';\n  description = commitMessage.match(commitPatterns.major)?.[1];\n} else if (commitPatterns.minor.test(commitMessage)) {\n  const scope = commitMessage.match(commitPatterns.minor)?.[1];\n  if (validScopes.includes(scope)) {\n    changeType = 'minor';\n    packageScope = scope;\n    description = commitMessage.match(commitPatterns.minor)?.[2];\n  }\n} else if (commitPatterns.patch.test(commitMessage)) {\n  const scope = commitMessage.match(commitPatterns.patch)?.[1];\n  if (validScopes.includes(scope)) {\n    changeType = 'patch';\n    packageScope = scope;\n    description = commitMessage.match(commitPatterns.patch)?.[2];\n  }\n}\n\n// Generate and write changeset if valid package found\nif (packageScope) {\n  packageScope = packageScope.trim();\n  description = description?.trim() || 'No description provided.';\n\n  // Determine the full package name based on scope\n  const packageName =\n    packageScope === 'core'\n      ? '@mindfiredigital/pivothead'\n      : `@mindfiredigital/pivothead-${packageScope}`;\n\n  // Generate changeset content\n  const changesetContent = `---\n  '${packageName}': ${changeType}\n  ---\n  ${description}\n  `;\n\n  // Write to a changeset file\n  fs.writeFileSync(`.changeset/auto-${Date.now()}.md`, changesetContent);\n  console.log(`\u2705 Changeset file created for package: ${packageName}`);\n} else {\n  console.log(\n    '\u26a0\ufe0f No valid package scope found in commit message. Valid scopes are: core, react, angular, vue, svelte, web-component'\n  );\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["We use a script (",(0,t.jsx)(n.code,{children:".github/changeset-version.js"}),") to automatically updtate the versions:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// This script automatically updates the versions of package\nconst { exec } = require('child_process');\n\nexec('npx changeset version');\nexec('npm install');\n"})}),"\n",(0,t.jsx)(n.h2,{id:"common-commands",children:"Common Commands"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Install dependencies\npnpm install\n\n# Build all packages\npnpm build\n\n# Run development mode\npnpm dev\n\n# Create a changeset\npnpm changeset\n\n# Publish packages\npnpm release\n\n# Clean build artifacts\npnpm clean\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Commit Messages"}),": Always follow the conventional commit format:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"feat(scope): message"})," for features"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fix(scope): message"})," for bug fixes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"BREAKING CHANGE: message"})," for breaking changes"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Package Versioning"}),": Let changesets handle version bumps automatically."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Dependencies"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"pnpm add"})," with the ",(0,t.jsx)(n.code,{children:"--filter"})," flag to add package-specific dependencies"]}),"\n",(0,t.jsx)(n.li,{children:"Use workspace protocols for internal dependencies"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Build Pipeline"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Ensure all packages define their build dependencies correctly in ",(0,t.jsx)(n.code,{children:"turbo.json"})]}),"\n",(0,t.jsxs)(n.li,{children:["Use the ",(0,t.jsx)(n.code,{children:"--filter"})," flag with Turbo for targeted builds"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.p,{children:"Common issues and solutions:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"pnpm install fails"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Clear pnpm store: ",(0,t.jsx)(n.code,{children:"pnpm store prune"})]}),"\n",(0,t.jsxs)(n.li,{children:["Delete node_modules: ",(0,t.jsx)(n.code,{children:"pnpm clean"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Turbo cache issues"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Clear Turbo's cache: ",(0,t.jsx)(n.code,{children:"pnpm turbo clean"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Changeset conflicts"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Remove .changeset directory"}),"\n",(0,t.jsxs)(n.li,{children:["Regenerate changesets: ",(0,t.jsx)(n.code,{children:"pnpm changeset:autogenerate"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://pnpm.io/workspaces",children:"pnpm Documentation"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://turbo.build/repo/docs",children:"Turborepo Documentation"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/changesets/changesets",children:"Changesets Documentation"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var i=s(6540);const t={},a=i.createContext(t);function o(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);