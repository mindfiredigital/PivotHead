"use strict";(self.webpackChunkdocument=self.webpackChunkdocument||[]).push([[464],{5680:(e,n,a)=>{a.d(n,{xA:()=>c,yg:()=>d});var t=a(6540);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function r(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=t.createContext({}),p=function(e){var n=t.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):r(r({},n),e)),a},c=function(e){var n=p(e.components);return t.createElement(l.Provider,{value:n},e.children)},g="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),g=p(a),u=i,d=g["".concat(l,".").concat(u)]||g[u]||m[u]||o;return a?t.createElement(d,r(r({ref:n},c),{},{components:a})):t.createElement(d,r({ref:n},c))}));function d(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=a.length,r=new Array(o);r[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[g]="string"==typeof e?e:i,r[1]=s;for(var p=2;p<o;p++)r[p]=a[p];return t.createElement.apply(null,r)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},6518:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var t=a(8168),i=(a(6540),a(5680));const o={sidebar_position:3},r="Monorepo Setup Guide",s={unversionedId:"contributors/monorepo-setup",id:"contributors/monorepo-setup",title:"Monorepo Setup Guide",description:"This guide explains how to set up and manage a monorepo using pnpm workspaces, Turborepo, and Changesets.",source:"@site/docs/contributors/monorepo-setup.md",sourceDirName:"contributors",slug:"/contributors/monorepo-setup",permalink:"/PivotHead/docs/contributors/monorepo-setup",draft:!1,editUrl:"https://github.com/mindfiredigital/PivotHead/tree/main/documentation/docs/contributors/monorepo-setup.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Code of conduct",permalink:"/PivotHead/docs/contributors/code-of-conduct"},next:{title:"Quick Start Guide",permalink:"/PivotHead/docs/contributors/quick-start"}},l={},p=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"Package Management with pnpm",id:"package-management-with-pnpm",level:2},{value:"Setting Up pnpm Workspaces",id:"setting-up-pnpm-workspaces",level:3},{value:"Installing Dependencies",id:"installing-dependencies",level:3},{value:"Build System with Turborepo",id:"build-system-with-turborepo",level:2},{value:"Configuring Turborepo",id:"configuring-turborepo",level:3},{value:"Running Tasks",id:"running-tasks",level:3},{value:"Version Management with Changesets",id:"version-management-with-changesets",level:2},{value:"Setup Changesets",id:"setup-changesets",level:3},{value:"Managing Versions",id:"managing-versions",level:3},{value:"Commit Lint Configuration",id:"commit-lint-configuration",level:3},{value:"Continuous Integration",id:"continuous-integration",level:2},{value:"GitHub Actions Workflow",id:"github-actions-workflow",level:3},{value:"Automatic Changeset Generation",id:"automatic-changeset-generation",level:3},{value:"Common Commands",id:"common-commands",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Additional Resources",id:"additional-resources",level:2}],c={toc:p},g="wrapper";function m(e){let{components:n,...a}=e;return(0,i.yg)(g,(0,t.A)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"monorepo-setup-guide"},"Monorepo Setup Guide"),(0,i.yg)("p",null,"This guide explains how to set up and manage a monorepo using pnpm workspaces, Turborepo, and Changesets."),(0,i.yg)("h2",{id:"table-of-contents"},"Table of Contents"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#prerequisites"},"Prerequisites")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#project-structure"},"Project Structure")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#package-management-with-pnpm"},"Package Management with pnpm")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#build-system-with-turborepo"},"Build System with Turborepo")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#version-management-with-changesets"},"Version Management with Changesets")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#continuous-integration"},"Continuous Integration"))),(0,i.yg)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.yg)("p",null,"Before you begin, ensure you have the following installed:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"# Install Node.js (v12 or higher)\n# Install pnpm globally\nnpm install -g pnpm\n\n# Required package dependencies\npnpm add -D @changesets/changelog-github @changesets/cli @commitlint/cli @commitlint/config-conventional turbo\n")),(0,i.yg)("p",null,"These packages are essential for the monorepo setup:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"@changesets/changelog-github")," and ",(0,i.yg)("inlineCode",{parentName:"li"},"@changesets/cli")," manage version control and changelog generation"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"@commitlint/cli")," and ",(0,i.yg)("inlineCode",{parentName:"li"},"@commitlint/config-conventional")," enforce commit message conventions"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"turbo")," provides the build system for managing dependencies between packages")),(0,i.yg)("h2",{id:"project-structure"},"Project Structure"),(0,i.yg)("p",null,"Our monorepo follows this structure:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"root/\n\u251c\u2500\u2500 .changeset/\n\u251c\u2500\u2500 .github/\n\u251c\u2500\u2500 packages/\n\u2502   \u251c\u2500\u2500 core/\n\u2502   \u251c\u2500\u2500 react/\n\u2502   \u251c\u2500\u2500 angular/\n\u2502   \u251c\u2500\u2500 vue/\n\u2502   \u2514\u2500\u2500 web-component/\n\u251c\u2500\u2500 examples/\n\u251c\u2500\u2500 documentation/\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 pnpm-workspace.yaml\n\u2514\u2500\u2500 turbo.json\n")),(0,i.yg)("h2",{id:"package-management-with-pnpm"},"Package Management with pnpm"),(0,i.yg)("h3",{id:"setting-up-pnpm-workspaces"},"Setting Up pnpm Workspaces"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"Create a ",(0,i.yg)("inlineCode",{parentName:"li"},"pnpm-workspace.yaml")," file in your root directory:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},"packages:\n  - 'packages/*'\n  - 'examples/*'\n")),(0,i.yg)("ol",{start:2},(0,i.yg)("li",{parentName:"ol"},"Configure your root ",(0,i.yg)("inlineCode",{parentName:"li"},"package.json"),":")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "@mindfiredigital/pivothead-table",\n  "private": true,\n  "workspaces": ["packages/*", "examples/*"],\n  "scripts": {\n    "build": "turbo run lint && turbo run build",\n    "dev": "turbo run dev",\n    "lint": "turbo run lint",\n    "test": "turbo run test",\n    "clean": "turbo run clean && rm -rf node_modules",\n    "preinstall": "npx only-allow pnpm"\n  }\n}\n')),(0,i.yg)("h3",{id:"installing-dependencies"},"Installing Dependencies"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"# Install dependencies across all packages\npnpm install\n\n# Add a dependency to a specific package\npnpm add <package> --filter @mindfiredigital/package-core\n")),(0,i.yg)("h2",{id:"build-system-with-turborepo"},"Build System with Turborepo"),(0,i.yg)("h3",{id:"configuring-turborepo"},"Configuring Turborepo"),(0,i.yg)("p",null,"Create a ",(0,i.yg)("inlineCode",{parentName:"p"},"turbo.json")," in your root directory:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "$schema": "https://turbo.build/schema.json",\n  "pipeline": {\n    "build": {\n      "dependsOn": ["^build"],\n      "outputs": ["dist/**"]\n    },\n    "test": {\n      "dependsOn": ["^build"],\n      "outputs": []\n    },\n    "lint": {\n      "outputs": []\n    },\n    "dev": {\n      "cache": false\n    }\n  }\n}\n')),(0,i.yg)("h3",{id:"running-tasks"},"Running Tasks"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"# Build all packages\npnpm turbo run build\n\n# Build specific packages\npnpm turbo run build --filter=@mindfiredigital/package-core...\n")),(0,i.yg)("h2",{id:"version-management-with-changesets"},"Version Management with Changesets"),(0,i.yg)("h3",{id:"setup-changesets"},"Setup Changesets"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"Install changesets:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"pnpm add -D @changesets/cli @changesets/changelog-github\n")),(0,i.yg)("ol",{start:2},(0,i.yg)("li",{parentName:"ol"},"Configure changesets in ",(0,i.yg)("inlineCode",{parentName:"li"},".changeset/config.json"),":")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "$schema": "https://unpkg.com/@changesets/config@3.0.5/schema.json",\n  "changelog": [\n    "@changesets/changelog-github",\n    { "repo": "mindfiredigital/Package" }\n  ],\n  "commit": false,\n  "fixed": [],\n  "linked": [],\n  "access": "public",\n  "baseBranch": "main",\n  "updateInternalDependencies": "patch",\n  "ignore": []\n}\n')),(0,i.yg)("h3",{id:"managing-versions"},"Managing Versions"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"Create a changeset:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"pnpm changeset\n")),(0,i.yg)("ol",{start:2},(0,i.yg)("li",{parentName:"ol"},"Commit format for automatic changeset generation:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},'# For new features\ngit commit -m "feat(core): add new table feature"\n\n# For bug fixes\ngit commit -m "fix(react): resolve rendering issue"\n\n# For breaking changes\ngit commit -m "BREAKING CHANGE: complete API redesign"\n')),(0,i.yg)("h3",{id:"commit-lint-configuration"},"Commit Lint Configuration"),(0,i.yg)("p",null,"We use commitlint to enforce commit message conventions. Here's our ",(0,i.yg)("inlineCode",{parentName:"p"},"commitlint.config.cjs"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},"module.exports = {\n  extends: ['@commitlint/config-conventional'],\n  rules: {\n    'scope-enum': [\n      2,\n      'always',\n      ['core', 'react', 'web-component', 'angular', 'docs', 'release'],\n    ],\n    'scope-empty': [2, 'never'],\n    'scope-case': [2, 'always', 'lower-case'],\n  },\n  ignores: [message => message.includes('[skip-commitlint]')],\n};\n")),(0,i.yg)("h2",{id:"continuous-integration"},"Continuous Integration"),(0,i.yg)("h3",{id:"github-actions-workflow"},"GitHub Actions Workflow"),(0,i.yg)("p",null,"Our release workflow (",(0,i.yg)("inlineCode",{parentName:"p"},".github/workflows/release.yml"),") handles automatic versioning and publishing:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},"name: Deployment Workflow PivotHead\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  build:\n    name: '@mindfiredigital/pivothead'\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n      packages: write\n      pull-requests: write\n      actions: write\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: 20\n\n      - name: Enable Corepack\n        run: npm install -g pnpm\n\n      - name: Install dependencies\n        run: pnpm install\n\n      - name: Build application\n        run: pnpm turbo run build\n\n      - name: Create Release Pull Request or Publish\n        uses: changesets/action@v1.4.1\n        with:\n          commit: 'chore(release): version packages'\n          title: 'chore(release): version packages'\n          version: node .github/changeset-version.js\n          publish: npx changeset publish\n        env:\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n")),(0,i.yg)("h3",{id:"automatic-changeset-generation"},"Automatic Changeset Generation"),(0,i.yg)("p",null,"We use a custom script (",(0,i.yg)("inlineCode",{parentName:"p"},".github/changeset-autogenerate.mjs"),") to automatically generate changesets from commit messages:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-javascript"},"// This script automatically creates changesets based on commit messages\nimport { execSync } from 'child_process';\nimport fs from 'fs';\n\n// Get the most recent commit message\nconst commitMessage = execSync('git log -1 --format=%s').toString().trim();\n\n// Define valid scopes\nconst validScopes = [\n  'core',\n  'react',\n  'angular',\n  'vue',\n  'svelte',\n  'web-component',\n];\n\n// Define regex patterns\nconst commitPatterns = {\n  major: /^BREAKING CHANGE: (.+)/,\n  minor: /^feat\\(([^)]+)\\): (.+)/,\n  patch: /^fix\\(([^)]+)\\): (.+)/,\n};\n\n// Identify type, package, and description\nlet packageScope = null;\nlet changeType = null;\nlet description = null;\n\nif (commitPatterns.major.test(commitMessage)) {\n  changeType = 'major';\n  description = commitMessage.match(commitPatterns.major)?.[1];\n} else if (commitPatterns.minor.test(commitMessage)) {\n  const scope = commitMessage.match(commitPatterns.minor)?.[1];\n  if (validScopes.includes(scope)) {\n    changeType = 'minor';\n    packageScope = scope;\n    description = commitMessage.match(commitPatterns.minor)?.[2];\n  }\n} else if (commitPatterns.patch.test(commitMessage)) {\n  const scope = commitMessage.match(commitPatterns.patch)?.[1];\n  if (validScopes.includes(scope)) {\n    changeType = 'patch';\n    packageScope = scope;\n    description = commitMessage.match(commitPatterns.patch)?.[2];\n  }\n}\n\n// Generate and write changeset if valid package found\nif (packageScope) {\n  packageScope = packageScope.trim();\n  description = description?.trim() || 'No description provided.';\n\n  // Determine the full package name based on scope\n  const packageName =\n    packageScope === 'core'\n      ? '@mindfiredigital/pivothead'\n      : `@mindfiredigital/pivothead-${packageScope}`;\n\n  // Generate changeset content\n  const changesetContent = `---\n  '${packageName}': ${changeType}\n  ---\n  ${description}\n  `;\n\n  // Write to a changeset file\n  fs.writeFileSync(`.changeset/auto-${Date.now()}.md`, changesetContent);\n  console.log(`\u2705 Changeset file created for package: ${packageName}`);\n} else {\n  console.log(\n    '\u26a0\ufe0f No valid package scope found in commit message. Valid scopes are: core, react, angular, vue, svelte, web-component'\n  );\n}\n")),(0,i.yg)("p",null,"We use a script (",(0,i.yg)("inlineCode",{parentName:"p"},".github/changeset-version.js"),") to automatically updtate the versions:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-javascript"},"// This script automatically updates the versions of package\nconst { exec } = require('child_process');\n\nexec('npx changeset version');\nexec('npm install');\n")),(0,i.yg)("h2",{id:"common-commands"},"Common Commands"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"# Install dependencies\npnpm install\n\n# Build all packages\npnpm build\n\n# Run development mode\npnpm dev\n\n# Create a changeset\npnpm changeset\n\n# Publish packages\npnpm release\n\n# Clean build artifacts\npnpm clean\n")),(0,i.yg)("h2",{id:"best-practices"},"Best Practices"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("strong",{parentName:"p"},"Commit Messages"),": Always follow the conventional commit format:"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"feat(scope): message")," for features"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"fix(scope): message")," for bug fixes"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"BREAKING CHANGE: message")," for breaking changes"))),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("strong",{parentName:"p"},"Package Versioning"),": Let changesets handle version bumps automatically.")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("strong",{parentName:"p"},"Dependencies"),":"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Use ",(0,i.yg)("inlineCode",{parentName:"li"},"pnpm add")," with the ",(0,i.yg)("inlineCode",{parentName:"li"},"--filter")," flag to add package-specific dependencies"),(0,i.yg)("li",{parentName:"ul"},"Use workspace protocols for internal dependencies"))),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("strong",{parentName:"p"},"Build Pipeline"),":"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Ensure all packages define their build dependencies correctly in ",(0,i.yg)("inlineCode",{parentName:"li"},"turbo.json")),(0,i.yg)("li",{parentName:"ul"},"Use the ",(0,i.yg)("inlineCode",{parentName:"li"},"--filter")," flag with Turbo for targeted builds")))),(0,i.yg)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,i.yg)("p",null,"Common issues and solutions:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("strong",{parentName:"p"},"pnpm install fails"),":"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Clear pnpm store: ",(0,i.yg)("inlineCode",{parentName:"li"},"pnpm store prune")),(0,i.yg)("li",{parentName:"ul"},"Delete node_modules: ",(0,i.yg)("inlineCode",{parentName:"li"},"pnpm clean")))),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("strong",{parentName:"p"},"Turbo cache issues"),":"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Clear Turbo's cache: ",(0,i.yg)("inlineCode",{parentName:"li"},"pnpm turbo clean")))),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("strong",{parentName:"p"},"Changeset conflicts"),":"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Remove .changeset directory"),(0,i.yg)("li",{parentName:"ul"},"Regenerate changesets: ",(0,i.yg)("inlineCode",{parentName:"li"},"pnpm changeset:autogenerate"))))),(0,i.yg)("h2",{id:"additional-resources"},"Additional Resources"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://pnpm.io/workspaces"},"pnpm Documentation")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://turbo.build/repo/docs"},"Turborepo Documentation")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://github.com/changesets/changesets"},"Changesets Documentation"))))}m.isMDXComponent=!0}}]);