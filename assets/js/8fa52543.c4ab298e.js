"use strict";(self.webpackChunkdocument=self.webpackChunkdocument||[]).push([[955],{4158:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"tutorial-basics/core/examples","title":"Examples & Usage","description":"Examples & Usage of PivotHead","source":"@site/docs/tutorial-basics/core/examples.md","sourceDirName":"tutorial-basics/core","slug":"/tutorial-basics/core/examples","permalink":"/PivotHead/docs/tutorial-basics/core/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/mindfiredigital/PivotHead/tree/main/documentation/docs/tutorial-basics/core/examples.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Examples & Usage","description":"Examples & Usage of PivotHead"},"sidebar":"tutorialSidebar","previous":{"title":"Api Reference","permalink":"/PivotHead/docs/tutorial-basics/core/api-reference"},"next":{"title":"PivotHead Web Component","permalink":"/PivotHead/docs/tutorial-basics/web-component"}}');var i=t(4848),o=t(8453);const r={sidebar_position:3,title:"Examples & Usage",description:"Examples & Usage of PivotHead"},l="Examples",s={},c=[{value:"Basic Pivot Table",id:"basic-pivot-table",level:2},{value:"Advanced Configuration with Custom Measures",id:"advanced-configuration-with-custom-measures",level:2},{value:"Filtering and Pagination",id:"filtering-and-pagination",level:2},{value:"Conditional Formatting",id:"conditional-formatting",level:2},{value:"Dynamic Configuration Changes",id:"dynamic-configuration-changes",level:2},{value:"Complete Application Example",id:"complete-application-example",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Step 1: Installation",id:"step-1-installation",level:3},{value:"Step 2: Import and Initialize",id:"step-2-import-and-initialize",level:3},{value:"Step 3: Render Your Pivot Table",id:"step-3-render-your-pivot-table",level:3},{value:"Working with Measures",id:"working-with-measures",level:2},{value:"Basic Measures",id:"basic-measures",level:3},{value:"Custom Formula Measures",id:"custom-formula-measures",level:3},{value:"Handling User Interactions",id:"handling-user-interactions",level:2},{value:"Sorting",id:"sorting",level:3},{value:"Filtering",id:"filtering",level:3},{value:"Pagination",id:"pagination",level:3},{value:"Advanced Customization",id:"advanced-customization",level:2},{value:"Conditional Formatting",id:"conditional-formatting-1",level:3},{value:"Working with Events",id:"working-with-events",level:3}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"examples",children:"Examples"})}),"\n",(0,i.jsx)(e.h2,{id:"basic-pivot-table",children:"Basic Pivot Table"}),"\n",(0,i.jsx)(e.p,{children:"This example demonstrates how to create a simple pivot table with products and regions."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"import { PivotEngine } from '@mindfiredigital/pivothead';\n\nconst data = [\n  {\n    date: '2024-01-01',\n    product: 'Widget A',\n    region: 'North',\n    sales: 1000,\n    quantity: 50,\n  },\n  {\n    date: '2024-01-01',\n    product: 'Widget B',\n    region: 'North',\n    sales: 1500,\n    quantity: 60,\n  },\n  {\n    date: '2024-01-01',\n    product: 'Widget A',\n    region: 'South',\n    sales: 1200,\n    quantity: 55,\n  },\n  {\n    date: '2024-01-01',\n    product: 'Widget B',\n    region: 'South',\n    sales: 1800,\n    quantity: 70,\n  },\n  {\n    date: '2024-01-02',\n    product: 'Widget A',\n    region: 'North',\n    sales: 1100,\n    quantity: 52,\n  },\n  {\n    date: '2024-01-02',\n    product: 'Widget B',\n    region: 'North',\n    sales: 1600,\n    quantity: 62,\n  },\n  {\n    date: '2024-01-02',\n    product: 'Widget A',\n    region: 'South',\n    sales: 1300,\n    quantity: 58,\n  },\n  {\n    date: '2024-01-02',\n    product: 'Widget B',\n    region: 'South',\n    sales: 1900,\n    quantity: 72,\n  },\n];\n\nconst config = {\n  data: data,\n  rows: [{ uniqueName: 'product', caption: 'Product' }],\n  columns: [{ uniqueName: 'region', caption: 'Region' }],\n  measures: [\n    {\n      uniqueName: 'sales',\n      caption: 'Total Sales',\n      aggregation: 'sum',\n      format: {\n        type: 'currency',\n        currency: 'USD',\n        locale: 'en-US',\n        decimals: 2,\n      },\n    },\n  ],\n  dimensions: [\n    { field: 'product', label: 'Product', type: 'string' },\n    { field: 'region', label: 'Region', type: 'string' },\n    { field: 'date', label: 'Date', type: 'date' },\n    { field: 'sales', label: 'Sales', type: 'number' },\n    { field: 'quantity', label: 'Quantity', type: 'number' },\n  ],\n};\n\nconst engine = new PivotEngine(config);\nconst state = engine.getState();\n\n// Now you can use the state to render your pivot table\nconsole.log(state);\n\n// In a real application, you would render the UI based on this state\n"})}),"\n",(0,i.jsx)(e.h2,{id:"advanced-configuration-with-custom-measures",children:"Advanced Configuration with Custom Measures"}),"\n",(0,i.jsx)(e.p,{children:"This example shows how to create custom measures using formulas."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"import { PivotEngine } from '@mindfiredigital/pivothead';\n\nconst data = [\n  // ... your data array\n];\n\nconst config = {\n  data: data,\n  rows: [{ uniqueName: 'product', caption: 'Product' }],\n  columns: [{ uniqueName: 'region', caption: 'Region' }],\n  measures: [\n    {\n      uniqueName: 'sales',\n      caption: 'Total Sales',\n      aggregation: 'sum',\n      format: {\n        type: 'currency',\n        currency: 'USD',\n        locale: 'en-US',\n        decimals: 2,\n      },\n    },\n    {\n      uniqueName: 'quantity',\n      caption: 'Total Quantity',\n      aggregation: 'sum',\n      format: {\n        type: 'number',\n        decimals: 0,\n        locale: 'en-US',\n      },\n    },\n    {\n      uniqueName: 'averageSale',\n      caption: 'Average Sale Price',\n      aggregation: 'custom',\n      format: {\n        type: 'currency',\n        currency: 'USD',\n        locale: 'en-US',\n        decimals: 2,\n      },\n      formula: item => item.sales / item.quantity,\n    },\n    {\n      uniqueName: 'profitMargin',\n      caption: 'Profit Margin (%)',\n      aggregation: 'custom',\n      format: {\n        type: 'percentage',\n        decimals: 1,\n        locale: 'en-US',\n      },\n      formula: item => ((item.sales - item.quantity * 10) / item.sales) * 100,\n    },\n  ],\n  dimensions: [\n    // ... your dimensions\n  ],\n};\n\nconst engine = new PivotEngine(config);\n"})}),"\n",(0,i.jsx)(e.h2,{id:"filtering-and-pagination",children:"Filtering and Pagination"}),"\n",(0,i.jsx)(e.p,{children:"This example demonstrates how to apply filters and pagination to your pivot table."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"import { PivotEngine } from '@mindfiredigital/pivothead';\n\n// Initialize with your data and configuration\nconst engine = new PivotEngine(config);\n\n// Apply filters to show only data for the North region with sales greater than 1000\nengine.applyFilters([\n  {\n    field: 'region',\n    operator: 'equals',\n    value: 'North',\n  },\n  {\n    field: 'sales',\n    operator: 'greaterThan',\n    value: 1000,\n  },\n]);\n\n// Set up pagination to show 10 items per page and view the first page\nengine.setPagination({\n  currentPage: 1,\n  pageSize: 10,\n});\n\n// Get the current state with applied filters and pagination\nconst filteredState = engine.getState();\nconsole.log(filteredState);\n\n// Get pagination information\nconst paginationInfo = engine.getPaginationState();\nconsole.log(\n  `Showing page ${paginationInfo.currentPage} of ${paginationInfo.totalPages}`\n);\n"})}),"\n",(0,i.jsx)(e.h2,{id:"conditional-formatting",children:"Conditional Formatting"}),"\n",(0,i.jsx)(e.p,{children:"This example shows how to apply conditional formatting to highlight cells based on their values."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"import { PivotEngine } from '@mindfiredigital/pivothead';\n\nconst config = {\n  // ... other configuration options\n  conditionalFormatting: [\n    {\n      value: {\n        type: 'Number',\n        operator: 'Greater than',\n        value1: '1500',\n        value2: '',\n      },\n      format: {\n        font: 'Arial',\n        size: '14px',\n        color: '#ffffff',\n        backgroundColor: '#4CAF50', // Green background for high values\n        bold: true,\n      },\n    },\n    {\n      value: {\n        type: 'Number',\n        operator: 'Less than',\n        value1: '1000',\n        value2: '',\n      },\n      format: {\n        font: 'Arial',\n        size: '14px',\n        color: '#ffffff',\n        backgroundColor: '#f44336', // Red background for low values\n        bold: true,\n      },\n    },\n  ],\n};\n\nconst engine = new PivotEngine(config);\n"})}),"\n",(0,i.jsx)(e.h2,{id:"dynamic-configuration-changes",children:"Dynamic Configuration Changes"}),"\n",(0,i.jsx)(e.p,{children:"This example demonstrates how to dynamically change the configuration of the pivot table."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"import { PivotEngine } from '@mindfiredigital/pivothead';\n\n// Initial configuration\nconst engine = new PivotEngine(initialConfig);\n\n// Function to update the pivot table view\nfunction updatePivotView(viewType) {\n  switch (viewType) {\n    case 'sales-by-product':\n      engine.setMeasures([\n        {\n          uniqueName: 'sales',\n          caption: 'Total Sales',\n          aggregation: 'sum',\n          format: {\n            type: 'currency',\n            currency: 'USD',\n            locale: 'en-US',\n            decimals: 2,\n          },\n        },\n      ]);\n      engine.setGroupConfig({\n        rowFields: ['product'],\n        columnFields: ['region'],\n      });\n      break;\n\n    case 'quantity-by-date':\n      engine.setMeasures([\n        {\n          uniqueName: 'quantity',\n          caption: 'Total Quantity',\n          aggregation: 'sum',\n          format: {\n            type: 'number',\n            decimals: 0,\n            locale: 'en-US',\n          },\n        },\n      ]);\n      engine.setGroupConfig({\n        rowFields: ['date'],\n        columnFields: ['product'],\n      });\n      break;\n\n    case 'reset':\n      engine.reset();\n      break;\n  }\n\n  // Get the updated state and re-render your UI\n  const state = engine.getState();\n  renderPivotTable(state);\n}\n\n// Example usage\ndocument.getElementById('view-selector').addEventListener('change', e => {\n  updatePivotView(e.target.value);\n});\n"})}),"\n",(0,i.jsx)(e.h2,{id:"complete-application-example",children:"Complete Application Example"}),"\n",(0,i.jsx)(e.p,{children:"This example shows a more complete application with event handlers for user interactions."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"import { PivotEngine } from '@mindfiredigital/pivothead';\n\n// Sample data\nconst data = [\n  // ... your data array\n];\n\n// Initial configuration\nconst config = {\n  data: data,\n  rows: [{ uniqueName: 'product', caption: 'Product' }],\n  columns: [{ uniqueName: 'region', caption: 'Region' }],\n  measures: [\n    {\n      uniqueName: 'sales',\n      caption: 'Total Sales',\n      aggregation: 'sum',\n      format: {\n        type: 'currency',\n        currency: 'USD',\n        locale: 'en-US',\n        decimals: 2,\n      },\n    },\n  ],\n  dimensions: [\n    { field: 'product', label: 'Product', type: 'string' },\n    { field: 'region', label: 'Region', type: 'string' },\n    { field: 'date', label: 'Date', type: 'date' },\n    { field: 'sales', label: 'Sales', type: 'number' },\n    { field: 'quantity', label: 'Quantity', type: 'number' },\n  ],\n  onRowDragEnd: (fromIndex, toIndex, data) => {\n    console.log(`Row moved from ${fromIndex} to ${toIndex}`);\n    // You can perform additional actions here\n  },\n  onColumnDragEnd: (fromIndex, toIndex, columns) => {\n    console.log(`Column moved from ${fromIndex} to ${toIndex}`);\n    // You can perform additional actions here\n  },\n};\n\n// Initialize the engine\nconst engine = new PivotEngine(config);\n\n// Function to render the pivot table\nfunction renderPivotTable(state) {\n  // This is a simplified example. In a real application, you would:\n  // 1. Create the table structure\n  // 2. Populate headers based on state.columns\n  // 3. Populate rows based on state.rows and state.data\n  // 4. Apply formatting and conditional formatting\n\n  const container = document.getElementById('pivot-container');\n  // Clear previous content\n  container.innerHTML = '';\n\n  // Create a simple representation for this example\n  const table = document.createElement('table');\n  table.className = 'pivot-table';\n\n  // Add headers\n  const thead = document.createElement('thead');\n  const headerRow = document.createElement('tr');\n\n  // Add corner cell\n  const cornerCell = document.createElement('th');\n  cornerCell.className = 'pivot-corner';\n  headerRow.appendChild(cornerCell);\n\n  // Add column headers\n  state.columns.forEach(column => {\n    const th = document.createElement('th');\n    th.textContent = column.caption;\n    th.className = 'pivot-column-header';\n    headerRow.appendChild(th);\n  });\n\n  thead.appendChild(headerRow);\n  table.appendChild(thead);\n\n  // Add rows\n  const tbody = document.createElement('tbody');\n  state.rows.forEach(row => {\n    const tr = document.createElement('tr');\n\n    // Add row header\n    const rowHeader = document.createElement('th');\n    rowHeader.textContent = row.caption;\n    rowHeader.className = 'pivot-row-header';\n    tr.appendChild(rowHeader);\n\n    // Add data cells\n    state.columns.forEach(column => {\n      const td = document.createElement('td');\n      td.className = 'pivot-cell';\n\n      // Find value for this cell\n      const cellValue = state.data.find(\n        item =>\n          item[row.uniqueName] === row.value &&\n          item[column.uniqueName] === column.value\n      );\n\n      if (cellValue) {\n        td.textContent = engine.formatValue(cellValue.sales, 'sales');\n      } else {\n        td.textContent = '-';\n      }\n\n      tr.appendChild(td);\n    });\n\n    tbody.appendChild(tr);\n  });\n\n  table.appendChild(tbody);\n  container.appendChild(table);\n}\n\n// Initial render\nrenderPivotTable(engine.getState());\n\n// Event handlers for UI controls\ndocument.getElementById('sort-button').addEventListener('click', () => {\n  engine.sort('sales', 'desc');\n  renderPivotTable(engine.getState());\n});\n\ndocument.getElementById('filter-button').addEventListener('click', () => {\n  engine.applyFilters([\n    {\n      field: 'sales',\n      operator: 'greaterThan',\n      value: 1000,\n    },\n  ]);\n  renderPivotTable(engine.getState());\n});\n\ndocument.getElementById('reset-button').addEventListener('click', () => {\n  engine.reset();\n  renderPivotTable(engine.getState());\n});\n\n// Pagination controls\ndocument.getElementById('next-page').addEventListener('click', () => {\n  const pagination = engine.getPaginationState();\n  if (pagination.currentPage < pagination.totalPages) {\n    engine.setPagination({\n      currentPage: pagination.currentPage + 1,\n      pageSize: pagination.pageSize,\n    });\n    renderPivotTable(engine.getState());\n    updatePaginationInfo();\n  }\n});\n\ndocument.getElementById('prev-page').addEventListener('click', () => {\n  const pagination = engine.getPaginationState();\n  if (pagination.currentPage > 1) {\n    engine.setPagination({\n      currentPage: pagination.currentPage - 1,\n      pageSize: pagination.pageSize,\n    });\n    renderPivotTable(engine.getState());\n    updatePaginationInfo();\n  }\n});\n\nfunction updatePaginationInfo() {\n  const pagination = engine.getPaginationState();\n  document.getElementById('pagination-info').textContent =\n    `Page ${pagination.currentPage} of ${pagination.totalPages}`;\n}\n\n// Initial pagination info\nupdatePaginationInfo();\n"})}),"\n",(0,i.jsx)(e.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,i.jsx)(e.h3,{id:"step-1-installation",children:"Step 1: Installation"}),"\n",(0,i.jsx)(e.p,{children:"First, install the PivotHead library using your package manager:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"pnpm install @mindfiredigital/pivothead\n"})}),"\n",(0,i.jsx)(e.h3,{id:"step-2-import-and-initialize",children:"Step 2: Import and Initialize"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"import { PivotEngine } from '@mindfiredigital/pivothead';\n\n// Prepare your data\nconst data = [\n  // Your data array\n];\n\n// Create configuration\nconst config = {\n  data: data,\n  rows: [{ uniqueName: 'product', caption: 'Product' }],\n  columns: [{ uniqueName: 'region', caption: 'Region' }],\n  measures: [\n    {\n      uniqueName: 'sales',\n      caption: 'Total Sales',\n      aggregation: 'sum',\n      format: {\n        type: 'currency',\n        currency: 'USD',\n        locale: 'en-US',\n        decimals: 2,\n      },\n    },\n  ],\n  dimensions: [\n    // Your dimensions\n  ],\n};\n\n// Initialize engine\nconst engine = new PivotEngine(config);\n"})}),"\n",(0,i.jsx)(e.h3,{id:"step-3-render-your-pivot-table",children:"Step 3: Render Your Pivot Table"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Get the state\nconst state = engine.getState();\n\n// Render your table using your preferred UI library or vanilla JS\n// This will depend on your specific implementation\n"})}),"\n",(0,i.jsx)(e.h2,{id:"working-with-measures",children:"Working with Measures"}),"\n",(0,i.jsx)(e.p,{children:"Measures are the values you want to analyze in your pivot table. PivotHead supports various aggregation types and custom formulas."}),"\n",(0,i.jsx)(e.h3,{id:"basic-measures",children:"Basic Measures"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"const measures = [\n  {\n    uniqueName: 'sales',\n    caption: 'Total Sales',\n    aggregation: 'sum',\n    format: {\n      type: 'currency',\n      currency: 'USD',\n      locale: 'en-US',\n      decimals: 2,\n    },\n  },\n  {\n    uniqueName: 'quantity',\n    caption: 'Total Quantity',\n    aggregation: 'sum',\n    format: {\n      type: 'number',\n      decimals: 0,\n      locale: 'en-US',\n    },\n  },\n];\n"})}),"\n",(0,i.jsx)(e.h3,{id:"custom-formula-measures",children:"Custom Formula Measures"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"const measures = [\n  // Basic measures\n  // ...\n  {\n    uniqueName: 'averagePrice',\n    caption: 'Average Price',\n    aggregation: 'custom',\n    format: {\n      type: 'currency',\n      currency: 'USD',\n      locale: 'en-US',\n      decimals: 2,\n    },\n    formula: item => item.sales / item.quantity,\n  },\n];\n"})}),"\n",(0,i.jsx)(e.h2,{id:"handling-user-interactions",children:"Handling User Interactions"}),"\n",(0,i.jsx)(e.h3,{id:"sorting",children:"Sorting"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Sort by a specific field\nsortButton.addEventListener('click', () => {\n  engine.sort('sales', 'desc'); // or 'asc'\n  renderPivotTable(engine.getState());\n});\n"})}),"\n",(0,i.jsx)(e.h3,{id:"filtering",children:"Filtering"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Apply multiple filters\nfilterButton.addEventListener('click', () => {\n  engine.applyFilters([\n    {\n      field: 'region',\n      operator: 'equals',\n      value: 'North',\n    },\n    {\n      field: 'date',\n      operator: 'greaterThan',\n      value: new Date('2024-01-15'),\n    },\n  ]);\n  renderPivotTable(engine.getState());\n});\n\n// Clear filters\nclearFiltersButton.addEventListener('click', () => {\n  engine.applyFilters([]);\n  renderPivotTable(engine.getState());\n});\n"})}),"\n",(0,i.jsx)(e.h3,{id:"pagination",children:"Pagination"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Setup pagination controls\nnextPageButton.addEventListener('click', () => {\n  const pagination = engine.getPaginationState();\n  if (pagination.currentPage < pagination.totalPages) {\n    engine.setPagination({\n      currentPage: pagination.currentPage + 1,\n      pageSize: pagination.pageSize,\n    });\n    renderPivotTable(engine.getState());\n  }\n});\n\nprevPageButton.addEventListener('click', () => {\n  const pagination = engine.getPaginationState();\n  if (pagination.currentPage > 1) {\n    engine.setPagination({\n      currentPage: pagination.currentPage - 1,\n      pageSize: pagination.pageSize,\n    });\n    renderPivotTable(engine.getState());\n  }\n});\n\n// Change page size\npageSizeSelector.addEventListener('change', e => {\n  engine.setPagination({\n    currentPage: 1,\n    pageSize: parseInt(e.target.value),\n  });\n  renderPivotTable(engine.getState());\n});\n"})}),"\n",(0,i.jsx)(e.h2,{id:"advanced-customization",children:"Advanced Customization"}),"\n",(0,i.jsx)(e.h3,{id:"conditional-formatting-1",children:"Conditional Formatting"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"const config = {\n  // Other configuration options\n  conditionalFormatting: [\n    {\n      value: {\n        type: 'Number',\n        operator: 'Greater than',\n        value1: '1500',\n        value2: '',\n      },\n      format: {\n        backgroundColor: '#e6f7ff', // Light blue for high values\n        color: '#0066cc',\n        bold: true,\n      },\n    },\n    {\n      value: {\n        type: 'Number',\n        operator: 'Less than',\n        value1: '500',\n        value2: '',\n      },\n      format: {\n        backgroundColor: '#ffe6e6', // Light red for low values\n        color: '#cc0000',\n        bold: true,\n      },\n    },\n  ],\n};\n"})}),"\n",(0,i.jsx)(e.h3,{id:"working-with-events",children:"Working with Events"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"const config = {\n  // Other configuration options\n  onRowDragEnd: (fromIndex, toIndex, data) => {\n    console.log(`Row moved from ${fromIndex} to ${toIndex}`);\n    saveUserPreference(\n      'rowOrder',\n      data.map(item => item.id)\n    );\n  },\n  onColumnDragEnd: (fromIndex, toIndex, columns) => {\n    console.log(`Column moved from ${fromIndex} to ${toIndex}`);\n    saveUserPreference(\n      'columnOrder',\n      columns.map(col => col.uniqueName)\n    );\n  },\n};\n"})})]})}function u(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>l});var a=t(6540);const i={},o=a.createContext(i);function r(n){const e=a.useContext(o);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:r(n.components),a.createElement(o.Provider,{value:e},n.children)}}}]);