Directory structure:
└── documentation/
    ├── README.md
    ├── babel.config.js
    ├── docusaurus.config.js
    ├── package.json
    ├── postcss.config.mjs
    ├── sidebars.js
    ├── tailwind.config.js
    ├── docs/
    │   ├── Installation.md
    │   ├── what-is-pivothead.md
    │   ├── Why-we-use-pivothead.md
    │   ├── contributors/
    │   │   ├── _category_.json
    │   │   ├── code-of-conduct.md
    │   │   ├── contributors.md
    │   │   ├── how-to-contribute.md
    │   │   ├── monorepo-setup.md
    │   │   └── quick-start.md
    │   └── tutorial-basics/
    │       ├── _category_.json
    │       ├── api-reference.md
    │       ├── core-concepts.md
    │       ├── examples.md
    │       └── troubleshooting.md
    ├── src/
    │   ├── components/
    │   │   ├── bar-chart.tsx
    │   │   ├── bg-box.tsx
    │   │   ├── gradient-text.tsx
    │   │   ├── line-chart.tsx
    │   │   ├── morphing-text.tsx
    │   │   ├── pie-chart.tsx
    │   │   ├── ripple.tsx
    │   │   ├── rotating-text.tsx
    │   │   ├── whiteripple.tsx
    │   │   └── HomepageFeatures/
    │   │       ├── index.js
    │   │       └── styles.module.css
    │   ├── css/
    │   │   ├── animate-custom.css
    │   │   └── custom.css
    │   ├── lib/
    │   │   └── utils.ts
    │   └── pages/
    │       ├── index.js
    │       ├── index.module.css
    │       └── markdown-page.md
    └── static/
        ├── .nojekyll
        └── img/
            └── pivothead.webp

================================================
FILE: README.md
================================================
# Website

This website is built using [Docusaurus 2](https://docusaurus.io/), a modern static website generator.

### Installation

```
$ yarn
```

### Local Development

```
$ yarn start
```

This command starts a local development server and opens up a browser window. Most changes are reflected live without having to restart the server.

### Build

```
$ yarn build
```

This command generates static content into the `build` directory and can be served using any static contents hosting service.

### Deployment

Using SSH:

```
$ USE_SSH=true yarn deploy
```

Not using SSH:

```
$ GIT_USER=<Your GitHub username> yarn deploy
```

If you are using GitHub pages for hosting, this command is a convenient way to build the website and push to the `gh-pages` branch.



/**
 * Any CSS included here will be global. The classic template
 * bundles Infima by default. Infima is a CSS framework designed to
 * work well for content-centric websites.
 */

/* You can override the default Infima variables here. */
:root {
  --ifm-color-primary: #ff0000;
  --ifm-color-primary-dark: #e60000;
  --ifm-color-primary-darker: #d90000;
  --ifm-color-primary-darkest: #b30000;
  --ifm-color-primary-light: #ff1a1a;
  --ifm-color-primary-lighter: #ff2626;
  --ifm-color-primary-lightest: #ff4d4d;
}

/* For readability concerns, you should choose a lighter palette in dark mode. */
[data-theme='dark'] {
  --ifm-color-primary: #ff0000;
  --ifm-color-primary-dark: #e60000;
  --ifm-color-primary-darker: #d90000;
  --ifm-color-primary-darkest: #b30000;
  --ifm-color-primary-light: #ff1a1a;
  --ifm-color-primary-lighter: #ff2626;
  --ifm-color-primary-lightest: #ff4d4d;
}

.navbar__title {
  color: red;
}


================================================
FILE: babel.config.js
================================================
module.exports = {
  presets: [require.resolve('@docusaurus/core/lib/babel/preset')],
};



================================================
FILE: docusaurus.config.js
================================================
// @ts-nocheck
// Note: type annotations allow type checking and IDEs autocompletion

const { themes } = require("prism-react-renderer")

// const lightCodeTheme = require('prism-react-renderer/themes/github');
// const darkCodeTheme = require('prism-react-renderer/themes/dracula');

/** @type {import('@docusaurus/types').Config} */
const config = {
  title: "PivotHead",
  tagline: "Documentation for the PivotHead",
  favicon: "img/logo.png",

  // Set the production url of your site here
  url: "https://mindfiredigital.github.io",
  // Set the /<baseUrl>/ pathname under which your site is served
  // For GitHub pages deployment, it is often '/<projectName>/'
  baseUrl: "/PivotHead",

  // GitHub pages deployment config.
  // If you aren't using GitHub pages, you don't need these.
  organizationName: "mindfiredigital", // Usually your GitHub org/user name.
  projectName: "PivotHead", // Usually your repo name.

  onBrokenLinks: "throw",
  onBrokenMarkdownLinks: "warn",

  // Even if you don't use internalization, you can use this field to set useful
  // metadata like html lang. For example, if your site is Chinese, you may want
  // to replace "en" with "zh-Hans".
  i18n: {
    defaultLocale: "en",
    locales: ["en"],
  },

  presets: [
    [
      "classic",
      /** @type {import('@docusaurus/preset-classic').Options} */
      ({
        docs: {
          sidebarPath: require.resolve("./sidebars.js"),
          // Please change this to your repo.
          // Remove this to remove the "edit this page" links.
          editUrl: "https://github.com/mindfiredigital/PivotHead/tree/main/documentation/",
        },
        blog: {
          showReadingTime: true,
          // Please change this to your repo.
          // Remove this to remove the "edit this page" links.
          editUrl: "https://github.com/mindfiredigital/PivotHead/tree/main/documentation/",
        },
        theme: {
          customCss: require.resolve("./src/css/custom.css"),
        },
      }),
    ],
  ],

  plugins: [
    async function docusaurusTailwindcss(context, options) {
      return {
        name: "docusaurus-tailwindcss",
        configurePostCss(postcssOptions) {
          // Appends Tailwind CSS and AutoPrefixer.
          postcssOptions.plugins.push(require("tailwindcss"))
          postcssOptions.plugins.push(require("autoprefixer"))
          return postcssOptions
        },
      }
    },
  ],

  scripts: [
    {
      src: "https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js",
    },
    {
      src: "https://cdn.jsdelivr.net/npm/vanta@0.5.21/dist/vanta.net.min.js",
    },
  ],

  themeConfig:
    /** @type {import('@docusaurus/preset-classic').ThemeConfig} */
    ({
      // Replace with your project's social card
      image: "img/pivothead.webp",
      navbar: {
        title: "PivotHead",
        logo: {
          alt: "PivotHead Logo",
          src: "img/logo.png",
        },
        items: [
          {
            type: "docSidebar",
            sidebarId: "tutorialSidebar",
            position: "left",
            label: "Documentation",
          },
          {
            href: "https://www.npmjs.com/package/@mindfiredigital/pivothead",
            position: "right",
            html: `
              <a href="https://www.npmjs.com/package/@mindfiredigital/pivothead" style="display: flex; align-items: center;">
                <img src="https://img.shields.io/npm/v/@mindfiredigital/pivothead.svg" alt="npm version" style="vertical-align: middle; margin-right: 5px;" />
                <img src="https://img.shields.io/npm/dt/@mindfiredigital/pivothead.svg" alt="total downloads" style="vertical-align: middle;" />
              </a>
            `,
          },
          {
            href: "https://github.com/mindfiredigital/PivotHead",
            label: "GitHub",
            position: "right",
          },
        ],
      },
      footer: {
        style: "dark",

        copyright: `© ${new Date().getFullYear()} Mindfire FOSS`,
      },
      prism: {
        theme: themes.github,
        darkTheme: themes.dracula,
      },
    }),
}

module.exports = config



================================================
FILE: package.json
================================================
{
  "name": "document",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "docusaurus": "docusaurus",
    "start": "docusaurus start",
    "build": "docusaurus build",
    "swizzle": "docusaurus swizzle",
    "deploy": "docusaurus deploy",
    "clear": "docusaurus clear",
    "serve": "docusaurus serve",
    "write-translations": "docusaurus write-translations",
    "write-heading-ids": "docusaurus write-heading-ids"
  },
  "dependencies": {
    "@docusaurus/core": "^3.7.0",
    "@docusaurus/preset-classic": "^3.7.0",
    "@mdx-js/react": "^3.1.0",
    "clsx": "^2.0.0",
    "motion": "^12.23.12",
    "ogl": "^1.0.11",
    "prism-react-renderer": "^2.3.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "tailwind-merge": "^3.3.0"
  },
  "devDependencies": {
    "@docusaurus/module-type-aliases": "3.7.0",
    "autoprefixer": "^10.4.21",
    "postcss": "^8.5.3",
    "tailwindcss": "^3.4.3"
  },
  "browserslist": {
    "production": [
      ">0.5%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "engines": {
    "node": ">=16.14"
  }
}



================================================
FILE: postcss.config.mjs
================================================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}



================================================
FILE: sidebars.js
================================================
/**
 * Creating a sidebar enables you to:
 - create an ordered group of docs
 - render a sidebar for each doc of that group
 - provide next/previous navigation

 The sidebars can be generated from the filesystem, or explicitly defined here.

 Create as many sidebars as you want.
 */

// @ts-check

/** @type {import('@docusaurus/plugin-content-docs').SidebarsConfig} */
const sidebars = {
  // By default, Docusaurus generates a sidebar from the docs folder structure
  tutorialSidebar: [{ type: 'autogenerated', dirName: '.' }],

  // But you can create a sidebar manually
  /*
  tutorialSidebar: [
    'intro',
    'hello',
    {
      type: 'category',
      label: 'Tutorial',
      items: ['tutorial-basics/create-a-document'],
    },
  ],
   */
};

module.exports = sidebars;



================================================
FILE: tailwind.config.js
================================================
// /** @type {import('tailwindcss').Config} */
// module.exports = {
//   content: [
//     "./src/**/*.{js,jsx,ts,tsx}",
//     "./docs/**/*.{md,mdx}",
//     "./blog/**/*.{md,mdx}",
//     "./static/**/*.{html,js}",
//   ],

//   theme: {
//     extend: {
//       animation: {
//         'fade-in-up': 'fadeInUp 0.6s ease-out forwards',
//         'fade-in-up-delay': 'fadeInUp 0.6s ease-out 0.2s both',
//         'fade-in-up-delay-2': 'fadeInUp 0.6s ease-out 0.4s both',
//       },
//       keyframes: {
//         fadeInUp: {
//           '0%': {
//             opacity: '0',
//             transform: 'translateY(30px)',
//           },
//           '100%': {
//             opacity: '1',
//             transform: 'translateY(0)',
//           },
//         },
//       },
//     },
//   },
//   plugins: [],
// };


/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ["./src/**/*.{js,jsx,ts,tsx}", "./docs/**/*.{md,mdx}", "./blog/**/*.{md,mdx}", "./static/**/*.{html,js}"],

  theme: {
    extend: {
      animation: {
        "fade-in-up": "fadeInUp 0.6s ease-out forwards",
        "fade-in-up-delay": "fadeInUp 0.6s ease-out 0.2s both",
        "fade-in-up-delay-2": "fadeInUp 0.6s ease-out 0.4s both",
        "slide-in-from-left": "slideInFromLeft 0.8s ease-out forwards",
        "slide-in-from-right": "slideInFromRight 0.8s ease-out forwards",
      },
      keyframes: {
        fadeInUp: {
          "0%": {
            opacity: "0",
            transform: "translateY(30px)",
          },
          "100%": {
            opacity: "1",
            transform: "translateY(0)",
          },
        },
        slideInFromLeft: {
          "0%": { transform: "translateX(-100px)", opacity: "0" },
          "100%": { transform: "translateX(0)", opacity: "1" },
        },
        slideInFromRight: {
          "0%": { transform: "translateX(100px)", opacity: "0" },
          "100%": { transform: "translateX(0)", opacity: "1" },
        },
      },
    },
  },
  plugins: [],
}


================================================
FILE: docs/Installation.md
================================================
---
sidebar_position: 2
title: Getting Started
description: Learn how to install and set up PivotHead in your project
---

# Getting Started with PivotHead

This guide will walk you through the process of installing PivotHead, setting up a basic configuration, and creating your first pivot table.

## Installation

To install PivotHead in your project, use your preferred package manager:

```bash
# Using npm
npm install @mindfiredigital/pivothead

# Using yarn
yarn add @mindfiredigital/pivothead

# Using pnpm
pnpm install @mindfiredigital/pivothead
```

## Basic Setup

Here's how to set up a basic pivot table using PivotHead:

```javascript
import { PivotEngine } from '@mindfiredigital/pivothead';

// Step 1: Prepare your data
const data = [
  {
    date: '2024-01-01',
    product: 'Widget A',
    region: 'North',
    sales: 1000,
    quantity: 50,
  },
  {
    date: '2024-01-01',
    product: 'Widget B',
    region: 'South',
    sales: 1500,
    quantity: 60,
  },
  {
    date: '2024-01-02',
    product: 'Widget A',
    region: 'East',
    sales: 1200,
    quantity: 55,
  },
  {
    date: '2024-01-02',
    product: 'Widget B',
    region: 'West',
    sales: 1800,
    quantity: 70,
  },
  // ... more data
];

// Step 2: Create your configuration
const config = {
  data: data,
  rows: [{ uniqueName: 'product', caption: 'Product' }],
  columns: [{ uniqueName: 'region', caption: 'Region' }],
  measures: [
    {
      uniqueName: 'sales',
      caption: 'Total Sales',
      aggregation: 'sum',
      format: {
        type: 'currency',
        currency: 'USD',
        locale: 'en-US',
        decimals: 2,
      },
    },
  ],
  dimensions: [
    { field: 'product', label: 'Product', type: 'string' },
    { field: 'region', label: 'Region', type: 'string' },
    { field: 'date', label: 'Date', type: 'date' },
    { field: 'sales', label: 'Sales', type: 'number' },
    { field: 'quantity', label: 'Quantity', type: 'number' },
  ],
};

// Step 3: Initialize the pivot engine
const engine = new PivotEngine(config);

// Step 4: Use the engine to render your pivot table
// (Actual rendering will depend on your UI framework)
```

## Understanding the Configuration

Let's break down the key parts of the configuration:

### Data

This is your raw dataset, typically an array of objects.

### Rows and Columns

These define the structure of your pivot table:

```javascript
rows: [{ uniqueName: 'product', caption: 'Product' }],
columns: [{ uniqueName: 'region', caption: 'Region' }],
```

This configuration will create a table with products as rows and regions as columns.

### Measures

Measures are the values that will be calculated and displayed in the cells:

```javascript
measures: [
  {
    uniqueName: 'sales',       // Field name in your data
    caption: 'Total Sales',    // Display name
    aggregation: 'sum',        // How to aggregate values
    format: {                  // How to format the display
      type: 'currency',
      currency: 'USD',
      locale: 'en-US',
      decimals: 2,
    },
  },
],
```

### Dimensions

Dimensions define the fields available for use in rows, columns, or filters:

```javascript
dimensions: [
  { field: 'product', label: 'Product', type: 'string' },
  { field: 'region', label: 'Region', type: 'string' },
  { field: 'date', label: 'Date', type: 'date' },
  { field: 'sales', label: 'Sales', type: 'number' },
  { field: 'quantity', label: 'Quantity', type: 'number' },
],
```

## Rendering Your First Pivot Table

After creating the PivotEngine, you'll need to render the results. Here's a simple example using vanilla JavaScript:

```javascript
// Get a reference to your container element
const container = document.getElementById('pivot-container');

// Function to render the pivot table
function renderPivotTable() {
  // Get the current state from the engine
  const state = engine.getState();

  // Clear the container
  container.innerHTML = '';

  // Create table element
  const table = document.createElement('table');
  table.className = 'pivot-table';

  // Create header row
  const thead = document.createElement('thead');
  const headerRow = document.createElement('tr');

  // Add empty cell for top-left corner
  headerRow.appendChild(document.createElement('th'));

  // Add column headers
  state.columnHeaders.forEach(column => {
    const th = document.createElement('th');
    th.textContent = column.caption;
    headerRow.appendChild(th);
  });

  thead.appendChild(headerRow);
  table.appendChild(thead);

  // Create table body
  const tbody = document.createElement('tbody');

  // Add rows
  state.data.forEach(row => {
    const tr = document.createElement('tr');

    // Add row header
    const th = document.createElement('th');
    th.textContent = row.rowHeader;
    tr.appendChild(th);

    // Add cells
    state.columnHeaders.forEach(column => {
      const td = document.createElement('td');
      const value = row[column.uniqueName] || 0;
      td.textContent = engine.formatValue(value, 'sales');
      tr.appendChild(td);
    });

    tbody.appendChild(tr);
  });

  table.appendChild(tbody);
  container.appendChild(table);
}

// Initial render
renderPivotTable();
```

## Complete Example

Here's a complete example that you can copy and paste into an HTML file to get started:

```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>PivotHead Example</title>
    <style>
      .pivot-table {
        border-collapse: collapse;
        width: 100%;
        margin: 20px 0;
      }
      .pivot-table th,
      .pivot-table td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: right;
      }
      .pivot-table th {
        background-color: #f2f2f2;
        text-align: left;
      }
    </style>
  </head>
  <body>
    <h1>PivotHead Example</h1>
    <div id="pivot-container"></div>

    <script type="module">
      import { PivotEngine } from 'https://cdn.jsdelivr.net/npm/@mindfiredigital/pivothead/dist/index.js';

      // Sample data
      const data = [
        {
          date: '2024-01-01',
          product: 'Widget A',
          region: 'North',
          sales: 1000,
          quantity: 50,
        },
        {
          date: '2024-01-01',
          product: 'Widget B',
          region: 'South',
          sales: 1500,
          quantity: 60,
        },
        {
          date: '2024-01-02',
          product: 'Widget A',
          region: 'East',
          sales: 1200,
          quantity: 55,
        },
        {
          date: '2024-01-02',
          product: 'Widget B',
          region: 'West',
          sales: 1800,
          quantity: 70,
        },
      ];

      // Configuration
      const config = {
        data: data,
        rows: [{ uniqueName: 'product', caption: 'Product' }],
        columns: [{ uniqueName: 'region', caption: 'Region' }],
        measures: [
          {
            uniqueName: 'sales',
            caption: 'Total Sales',
            aggregation: 'sum',
            format: {
              type: 'currency',
              currency: 'USD',
              locale: 'en-US',
              decimals: 2,
            },
          },
        ],
        dimensions: [
          { field: 'product', label: 'Product', type: 'string' },
          { field: 'region', label: 'Region', type: 'string' },
          { field: 'date', label: 'Date', type: 'date' },
          { field: 'sales', label: 'Sales', type: 'number' },
          { field: 'quantity', label: 'Quantity', type: 'number' },
        ],
      };

      // Initialize the engine
      const engine = new PivotEngine(config);

      // Render function (simplified for demo)
      function renderPivotTable() {
        const container = document.getElementById('pivot-container');
        container.innerHTML =
          '<pre>' + JSON.stringify(engine.getState(), null, 2) + '</pre>';
      }

      // Initial render
      renderPivotTable();
    </script>
  </body>
</html>
```

With these basics in place, you're ready to start building powerful data visualization tools with PivotHead!



================================================
FILE: docs/what-is-pivothead.md
================================================
---
sidebar_position: 1
title: What is PivotHead
description: Introduction to the PivotHead library and its capabilities
---

# What is PivotHead

PivotHead is a powerful and flexible JavaScript library for creating interactive pivot tables in modern web applications. It provides a robust core engine for data manipulation and analysis, allowing developers to transform complex datasets into insightful, interactive tables.

![PivotHead Banner](https://via.placeholder.com/800x200/e2e8f0/64748b?text=PivotHead:+Interactive+Pivot+Tables)

## Overview

PivotHead helps you transform raw data into structured, analyzable information through pivot tables - a data summarization tool that helps aggregate, sort, count, and average data stored in one table and display the results in a second table showing the summarized data.

With PivotHead, you can:

- **Analyze Data From Multiple Angles**: Reorganize and summarize selected columns and rows of data
- **Create Custom Calculations**: Apply formulas and functions to your data
- **Visualize Patterns and Trends**: Identify relationships that would otherwise be difficult to see
- **Make Data-Driven Decisions**: Generate insights from complex datasets quickly

## Key Features

PivotHead comes packed with features designed to handle complex data visualization needs:

| Feature                        | Description                                                   |
| ------------------------------ | ------------------------------------------------------------- |
| **Flexible Data Pivoting**     | Transform and analyze data from multiple perspectives         |
| **Advanced Aggregation**       | Apply sum, average, count, min, max, and custom aggregations  |
| **Sorting & Filtering**        | Comprehensive options for data refinement                     |
| **Multi-dimensional Grouping** | Group data by multiple fields simultaneously                  |
| **Pagination Support**         | Efficiently handle large datasets                             |
| **Interactive UI**             | Drag & drop interface, resizable columns, and expandable rows |
| **Conditional Formatting**     | Highlight important data with custom styling rules            |
| **Custom Measures & Formulas** | Create calculated fields with custom formulas                 |
| **Responsive Design**          | Automatically adapts to different screen sizes                |
| **Framework Compatibility**    | React support (with Vue, Svelte, and Angular coming soon)     |

## Technical Architecture

PivotHead is built with a modular architecture that separates its core functionality from framework-specific implementations:

1. **Core Engine**: The `PivotEngine` class handles all data processing, aggregation, sorting, and filtering
2. **Configuration System**: Extensive options for customizing behavior and appearance
3. **Framework Adapters**: (Coming soon) Specialized wrappers for React, Vue, Svelte, and Angular
4. **Event System**: Callbacks for user interactions like sorting, filtering, and drag/drop operations

## Use Cases

PivotHead is ideal for a variety of applications:

- **Business Intelligence Dashboards**: Visualize KPIs and metrics
- **Financial Analysis Tools**: Analyze revenue, expenses, and profitability
- **Sales Reporting Systems**: Track performance across products, regions, and time periods
- **Inventory Management**: Monitor stock levels and movement
- **HR Analytics**: Analyze employee data and performance metrics
- **Educational Tools**: Present complex datasets in an understandable format
- **Scientific Research**: Organize and analyze experimental data

## Browser Compatibility

PivotHead supports all modern browsers:

- Chrome 60+
- Firefox 60+
- Safari 12+
- Edge 79+
- Opera 47+

## What's Coming Next

Our roadmap for future releases includes:

- **React Component Library**: Dedicated React components for seamless integration
- **Vue.js Integration**: Vue-specific wrappers and components
- **Svelte and Angular Support**: Additional framework integrations
- **Advanced Export Options**: Export to Excel, CSV, and PDF
- **Custom Visualizations**: Charts and graphs based on pivot data
- **Dashboard Integration**: Tools for creating comprehensive dashboards
- **Real-time Data Support**: Streaming data capabilities



================================================
FILE: docs/Why-we-use-pivothead.md
================================================
---
sidebar_position: 3
title: Why Use PivotHead
description: Discover the advantages of using PivotHead for your data visualization needs
---

# Why Use PivotHead

In today's data-driven world, making sense of complex information is crucial for business success. PivotHead offers a modern, flexible solution for transforming raw data into actionable insights through interactive pivot tables. Here's why you should consider using PivotHead for your data visualization needs.

## Key Advantages

### 1. Flexible and Powerful Data Analysis

PivotHead goes beyond simple data display by providing a complete toolkit for data analysis:

- **Multi-dimensional Analysis**: Examine data across multiple dimensions simultaneously
- **Dynamic Aggregations**: Switch between sum, average, count, min, max, and custom aggregations on the fly
- **Complex Calculations**: Create custom measures with formulas to derive new insights
- **Hierarchical Data Support**: Handle nested data with expandable/collapsible rows

### 2. Modern JavaScript Architecture

Built with modern web development in mind:

- **Framework Agnostic Core**: The core engine works with any JavaScript framework
- **TypeScript Support**: Full TypeScript definitions for better development experience
- **Modular Design**: Use only what you need, keeping your bundle size small
- **Framework Integrations**: (Coming soon) Native support for React, Vue, Angular, and Svelte

### 3. Superior Performance

Optimized for handling large datasets efficiently:

- **Virtualized Rendering**: Only render visible rows for improved performance
- **Efficient Data Processing**: Optimized algorithms for aggregation and filtering
- **Pagination Support**: Built-in pagination for large datasets
- **Lazy Loading**: Load data on demand when working with remote data sources

### 4. Comprehensive Features

PivotHead includes all the features you need for professional data visualization:

- **Advanced Filtering**: Filter data using various operators (equals, contains, greater than, etc.)
- **Sorting Capabilities**: Sort by any column or measure
- **Conditional Formatting**: Highlight important data with custom styling
- **Custom Cell Formatting**: Format cells as currency, percentages, dates, and more
- **Responsive Design**: Adapts to different screen sizes and devices
- **Interactive UI**: Drag and drop for rows and columns, resizable columns

### 5. Developer-Friendly

Designed with developer experience in mind:

- **Intuitive API**: Clean, consistent API that's easy to learn
- **Comprehensive Documentation**: Detailed guides and examples
- **Customizable**: Extensive configuration options for tailoring to your needs
- **Event System**: Rich callbacks for integrating with your application's logic

## Comparison with Alternatives

### vs. Excel/Google Sheets

While spreadsheet applications are powerful, PivotHead offers several advantages for web applications:

- **Seamless Web Integration**: Designed specifically for web applications
- **Programmable**: Full programmatic control via JavaScript
- **Custom Styling**: Match your application's design system
- **Dynamic Updates**: Respond to user interactions and data changes in real-time

### vs. Other JavaScript Pivot Libraries

PivotHead stands out from other JavaScript pivot libraries:

| Feature                             | PivotHead                                          | Many Other Libraries                    |
| ----------------------------------- | -------------------------------------------------- | --------------------------------------- |
| **Modern JavaScript**               | ✅ ES6+, TypeScript                                | ❌ Often older JavaScript patterns      |
| **Framework Support**               | ✅ Framework agnostic core + specific integrations | ❌ Often tied to specific frameworks    |
| **Custom Measures**                 | ✅ Formula-based custom calculations               | ❌ Limited or no custom calculations    |
| **Conditional Formatting**          | ✅ Comprehensive rules-based system                | ❌ Basic or no conditional formatting   |
| **Performance with Large Datasets** | ✅ Optimized algorithms and pagination             | ❌ Often slow with large datasets       |
| **Development Activity**            | ✅ Actively maintained and updated                 | ❌ Many are abandoned or rarely updated |

## Real-World Use Cases

### Business Intelligence Dashboards

Create interactive dashboards that allow stakeholders to explore data from multiple angles:

- Sales performance by region, product, and time period
- Marketing campaign effectiveness across channels
- Financial analysis with custom KPIs

### Data-Driven Applications

Build applications that empower users to analyze and visualize their own data:

- Customer analytics platforms
- Inventory management systems
- Financial planning tools

### Reporting Systems

Generate dynamic reports that adapt to changing data and user needs:

- Automated monthly business reports
- Ad-hoc analysis for decision making
- Interactive reports that allow drilling down into details

## Customer Success Stories

> "Before PivotHead, our analysts spent hours creating Excel pivot tables for weekly reports. Now, our dashboard updates automatically, and executives can explore the data themselves."
> — Sarah K., Business Intelligence Director

> "We evaluated several pivot table libraries and chose PivotHead for its modern architecture and performance with large datasets. Our customers love the interactive features."
> — Michael T., Lead Developer

> "The conditional formatting feature alone saved us from writing thousands of lines of custom code. We can highlight trends and outliers automatically now."
> — Jennifer L., Product Manager

## Getting Started is Easy

PivotHead's intuitive API makes it easy to get started:

```javascript
import { PivotEngine } from '@mindfiredigital/pivothead';

// Create a new pivot engine with your data and configuration
const engine = new PivotEngine({
  data: yourData,
  rows: [{ uniqueName: 'category', caption: 'Category' }],
  columns: [{ uniqueName: 'region', caption: 'Region' }],
  measures: [{ uniqueName: 'sales', caption: 'Sales', aggregation: 'sum' }],
  // Additional configuration options...
});

// Use the engine in your application
const state = engine.getState();
// Render your UI based on the state...
```

## Conclusion

PivotHead combines the power of traditional pivot tables with the flexibility and performance of modern JavaScript. Whether you're building internal dashboards, customer-facing analytics tools, or complex reporting systems, PivotHead provides the features and performance you need to turn data into insights.



================================================
FILE: docs/contributors/_category_.json
================================================
{
  "label": "Contribution Guide",
  "position": 6,
  "link": {
    "type": "generated-index"
  }
}



================================================
FILE: docs/contributors/code-of-conduct.md
================================================
---
sidebar_position: 2
---

# Code of conduct

As contributors and maintainers of the pivothead package, we are dedicated to demonstrating respect to all individuals who contribute to this project. This respect encompasses actions such as posting issues, updating documentation, submitting pull requests, providing constructive feedback in comments, and engaging in any other project-related activities.

In our communications through GitHub and other project channels, we are firmly committed to maintaining a constructive and professional atmosphere. We will not condone personal attacks, trolling, public or private harassment, insults, or any other unprofessional behavior.

Our dedication extends to showing courtesy and respect to everyone involved in this project, regardless of their gender, gender identity, sexual orientation, disability, age, race, ethnicity, religion, or level of experience. We also expect that all contributors to the React Document Editor project will adhere to these principles.

In situations where a community member violates this code of conduct, the maintainers of the pivothead package may take appropriate actions, including the removal of issues, comments, and pull requests, or the suspension of user accounts.

If you encounter or observe any behavior that goes against this code of conduct or if you have other concerns, please do not hesitate to contact us.



================================================
FILE: docs/contributors/contributors.md
================================================
---
sidebar_position: 1
---

# Contributors

- Anand Kumar

  - GitHub: [https://github.com/anandmindfire](https://github.com/anandmindfire)

- Lakin Mohapatra
  - GitHub: [https://github.com/lakinmindfire](https://github.com/lakinmindfire)

Thank you, for your valuable contributions!



================================================
FILE: docs/contributors/how-to-contribute.md
================================================
---
sidebar_position: 1
---

# How to Contribute

We genuinely appreciate your interest in contributing to the React Document Editor project. Your invaluable contributions play a pivotal role in enhancing this project. Before you embark on your journey, please take a moment to familiarize yourself with the following guidelines:

## Table of Contents

- [Getting Started](#getting-started)
- [Selecting an Issue or Feature](#selecting-an-issue-or-feature)
- [Making Changes](#making-changes)
- [Submitting a Pull Request](#submitting-a-pull-request)
- [Code of Conduct](#code-of-conduct)
- [Licensing](#licensing)

## Getting Started

1. Begin by downloading the installer for the Long-Term Support (LTS) version of Node.js. This step also streamlines the npm installation process.
2. Proceed by forking the React Canvas Editor repository.
3. Execute `npm install` to install the necessary dependencies for this package.
4. Acquire insights into the document editor's functionality by running `npm run storybook`.

## Selecting an Issue or Feature

Review the project's issue tracker and GitHub repository to identify open issues or features that align with your interests. If you can't pinpoint a specific task, do not hesitate to reach out to the project maintainers for guidance.

## Making Changes

1. Create a new branch within your forked repository, providing it with a descriptive name.
2. Implement the desired feature or address the identified issue within your branch.
3. Adhere to the project's coding style and conventions to ensure consistency.
4. If applicable, create tests to comprehensively cover the functionality you're introducing or modifying.

## Submitting a Pull Request

1. Initiate a pull request (PR) on the primary project repository.
2. Provide a clear and concise description of the changes within the PR.
3. Elaborate on the issue you are addressing and outline the proposed solution.
4. Be prepared to receive constructive feedback and engage in productive discussions.
5. Adjust your code as necessary based on the feedback received.

## Code of Conduct

Kindly be aware that we uphold a code of conduct to maintain a positive and inclusive community. We urge you to thoroughly read and adhere to these guidelines during your participation in the project.

## Licensing

By contributing to this project, you consent to the licensing terms chosen by the project. Ensure you review the project's licensing file for detailed information.

We extend our gratitude for your contributions and eagerly anticipate your active involvement in the React Document Editor project!



================================================
FILE: docs/contributors/monorepo-setup.md
================================================
---
sidebar_position: 3
---

# Monorepo Setup Guide

This guide explains how to set up and manage a monorepo using pnpm workspaces, Turborepo, and Changesets.

## Table of Contents

- [Prerequisites](#prerequisites)
- [Project Structure](#project-structure)
- [Package Management with pnpm](#package-management-with-pnpm)
- [Build System with Turborepo](#build-system-with-turborepo)
- [Version Management with Changesets](#version-management-with-changesets)
- [Continuous Integration](#continuous-integration)

## Prerequisites

Before you begin, ensure you have the following installed:

```bash
# Install Node.js (v12 or higher)
# Install pnpm globally
npm install -g pnpm

# Required package dependencies
pnpm add -D @changesets/changelog-github @changesets/cli @commitlint/cli @commitlint/config-conventional turbo
```

These packages are essential for the monorepo setup:

- `@changesets/changelog-github` and `@changesets/cli` manage version control and changelog generation
- `@commitlint/cli` and `@commitlint/config-conventional` enforce commit message conventions
- `turbo` provides the build system for managing dependencies between packages

## Project Structure

Our monorepo follows this structure:

```
root/
├── .changeset/
├── .github/
├── packages/
│   ├── core/
│   ├── react/
│   ├── angular/
│   ├── vue/
│   └── web-component/
├── examples/
├── documentation/
├── package.json
├── pnpm-workspace.yaml
└── turbo.json
```

## Package Management with pnpm

### Setting Up pnpm Workspaces

1. Create a `pnpm-workspace.yaml` file in your root directory:

```yaml
packages:
  - 'packages/*'
  - 'examples/*'
```

2. Configure your root `package.json`:

```json
{
  "name": "@mindfiredigital/pivothead-table",
  "private": true,
  "workspaces": ["packages/*", "examples/*"],
  "scripts": {
    "build": "turbo run lint && turbo run build",
    "dev": "turbo run dev",
    "lint": "turbo run lint",
    "test": "turbo run test",
    "clean": "turbo run clean && rm -rf node_modules",
    "preinstall": "npx only-allow pnpm"
  }
}
```

### Installing Dependencies

```bash
# Install dependencies across all packages
pnpm install

# Add a dependency to a specific package
pnpm add <package> --filter @mindfiredigital/package-core
```

## Build System with Turborepo

### Configuring Turborepo

Create a `turbo.json` in your root directory:

```json
{
  "$schema": "https://turbo.build/schema.json",
  "pipeline": {
    "build": {
      "dependsOn": ["^build"],
      "outputs": ["dist/**"]
    },
    "test": {
      "dependsOn": ["^build"],
      "outputs": []
    },
    "lint": {
      "outputs": []
    },
    "dev": {
      "cache": false
    }
  }
}
```

### Running Tasks

```bash
# Build all packages
pnpm turbo run build

# Build specific packages
pnpm turbo run build --filter=@mindfiredigital/package-core...
```

## Version Management with Changesets

### Setup Changesets

1. Install changesets:

```bash
pnpm add -D @changesets/cli @changesets/changelog-github
```

2. Configure changesets in `.changeset/config.json`:

```json
{
  "$schema": "https://unpkg.com/@changesets/config@3.0.5/schema.json",
  "changelog": [
    "@changesets/changelog-github",
    { "repo": "mindfiredigital/Package" }
  ],
  "commit": false,
  "fixed": [],
  "linked": [],
  "access": "public",
  "baseBranch": "main",
  "updateInternalDependencies": "patch",
  "ignore": []
}
```

### Managing Versions

1. Create a changeset:

```bash
pnpm changeset
```

2. Commit format for automatic changeset generation:

```bash
# For new features
git commit -m "feat(core): add new table feature"

# For bug fixes
git commit -m "fix(react): resolve rendering issue"

# For breaking changes
git commit -m "BREAKING CHANGE: complete API redesign"
```

### Commit Lint Configuration

We use commitlint to enforce commit message conventions. Here's our `commitlint.config.cjs`:

```js
module.exports = {
  extends: ['@commitlint/config-conventional'],
  rules: {
    'scope-enum': [
      2,
      'always',
      ['core', 'react', 'web-component', 'angular', 'docs', 'release'],
    ],
    'scope-empty': [2, 'never'],
    'scope-case': [2, 'always', 'lower-case'],
  },
  ignores: [message => message.includes('[skip-commitlint]')],
};
```

## Continuous Integration

### GitHub Actions Workflow

Our release workflow (`.github/workflows/release.yml`) handles automatic versioning and publishing:

```yaml
name: Deployment Workflow PivotHead

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: '@mindfiredigital/pivothead'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pull-requests: write
      actions: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Enable Corepack
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build application
        run: pnpm turbo run build

      - name: Create Release Pull Request or Publish
        uses: changesets/action@v1.4.1
        with:
          commit: 'chore(release): version packages'
          title: 'chore(release): version packages'
          version: node .github/changeset-version.js
          publish: npx changeset publish
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
```

### Automatic Changeset Generation

We use a custom script (`.github/changeset-autogenerate.mjs`) to automatically generate changesets from commit messages:

```javascript
// This script automatically creates changesets based on commit messages
import { execSync } from 'child_process';
import fs from 'fs';

// Get the most recent commit message
const commitMessage = execSync('git log -1 --format=%s').toString().trim();

// Define valid scopes
const validScopes = [
  'core',
  'react',
  'angular',
  'vue',
  'svelte',
  'web-component',
];

// Define regex patterns
const commitPatterns = {
  major: /^BREAKING CHANGE: (.+)/,
  minor: /^feat\(([^)]+)\): (.+)/,
  patch: /^fix\(([^)]+)\): (.+)/,
};

// Identify type, package, and description
let packageScope = null;
let changeType = null;
let description = null;

if (commitPatterns.major.test(commitMessage)) {
  changeType = 'major';
  description = commitMessage.match(commitPatterns.major)?.[1];
} else if (commitPatterns.minor.test(commitMessage)) {
  const scope = commitMessage.match(commitPatterns.minor)?.[1];
  if (validScopes.includes(scope)) {
    changeType = 'minor';
    packageScope = scope;
    description = commitMessage.match(commitPatterns.minor)?.[2];
  }
} else if (commitPatterns.patch.test(commitMessage)) {
  const scope = commitMessage.match(commitPatterns.patch)?.[1];
  if (validScopes.includes(scope)) {
    changeType = 'patch';
    packageScope = scope;
    description = commitMessage.match(commitPatterns.patch)?.[2];
  }
}

// Generate and write changeset if valid package found
if (packageScope) {
  packageScope = packageScope.trim();
  description = description?.trim() || 'No description provided.';

  // Determine the full package name based on scope
  const packageName =
    packageScope === 'core'
      ? '@mindfiredigital/pivothead'
      : `@mindfiredigital/pivothead-${packageScope}`;

  // Generate changeset content
  const changesetContent = `---
  '${packageName}': ${changeType}
  ---
  ${description}
  `;

  // Write to a changeset file
  fs.writeFileSync(`.changeset/auto-${Date.now()}.md`, changesetContent);
  console.log(`✅ Changeset file created for package: ${packageName}`);
} else {
  console.log(
    '⚠️ No valid package scope found in commit message. Valid scopes are: core, react, angular, vue, svelte, web-component'
  );
}
```

We use a script (`.github/changeset-version.js`) to automatically updtate the versions:

```javascript
// This script automatically updates the versions of package
const { exec } = require('child_process');

exec('npx changeset version');
exec('npm install');
```

## Common Commands

```bash
# Install dependencies
pnpm install

# Build all packages
pnpm build

# Run development mode
pnpm dev

# Create a changeset
pnpm changeset

# Publish packages
pnpm release

# Clean build artifacts
pnpm clean
```

## Best Practices

1. **Commit Messages**: Always follow the conventional commit format:

   - `feat(scope): message` for features
   - `fix(scope): message` for bug fixes
   - `BREAKING CHANGE: message` for breaking changes

2. **Package Versioning**: Let changesets handle version bumps automatically.

3. **Dependencies**:

   - Use `pnpm add` with the `--filter` flag to add package-specific dependencies
   - Use workspace protocols for internal dependencies

4. **Build Pipeline**:
   - Ensure all packages define their build dependencies correctly in `turbo.json`
   - Use the `--filter` flag with Turbo for targeted builds

## Troubleshooting

Common issues and solutions:

1. **pnpm install fails**:

   - Clear pnpm store: `pnpm store prune`
   - Delete node_modules: `pnpm clean`

2. **Turbo cache issues**:

   - Clear Turbo's cache: `pnpm turbo clean`

3. **Changeset conflicts**:
   - Remove .changeset directory
   - Regenerate changesets: `pnpm changeset:autogenerate`

## Additional Resources

- [pnpm Documentation](https://pnpm.io/workspaces)
- [Turborepo Documentation](https://turbo.build/repo/docs)
- [Changesets Documentation](https://github.com/changesets/changesets)



================================================
FILE: docs/contributors/quick-start.md
================================================
---
sidebar_position: 4
---

# Quick Start Guide

Get started with our monorepo setup in 5 minutes.

## 1. Clone and Setup

```bash
# Clone the repository
git clone https://github.com/mindfiredigital/reponame.git
cd PivotHead

# Install pnpm if you haven't already
npm install -g pnpm

# Install dependencies
pnpm install
```

## 2. Development Workflow

```bash
# Start development environment
pnpm dev

# Build all packages
pnpm build

# Run tests
pnpm test
```

## 3. Making Changes

1. Create a new branch:

```bash
git checkout -b feature/your-feature
```

2. Make your changes

3. Commit using conventional commits:

```bash
git commit -m "feat(core): add new feature"
# or
git commit -m "fix(react): fix bug"
```

4. Push and create a PR:

```bash
git push origin feature/your-feature
```

## 4. Publishing

The release process is automated through GitHub Actions. When your PR is merged:

1. A changeset will be automatically generated
2. A new version will be created
3. Packages will be published to npm

## Need Help?

- Check the full [Monorepo Setup Guide](./monorepo-setup.md)
- Open an issue on GitHub
- Contact the team



================================================
FILE: docs/tutorial-basics/_category_.json
================================================
{
  "label": "Tutorials",
  "position": 4,
  "link": {
    "type": "generated-index"
  }
}



================================================
FILE: docs/tutorial-basics/api-reference.md
================================================
---
sidebar_position: 2
title: Api Reference
description: Understanding the Api References of PivotHead
---

# API Reference

## PivotEngine

The `PivotEngine` class is the core of the PivotHead library, providing the functionality for data manipulation, formatting, and state management.

### Constructor

```typescript
constructor(config: PivotTableConfig<T>)
```

Creates a new instance of PivotEngine with the given configuration.

**Example:**

```javascript
import { PivotEngine } from '@mindfiredigital/pivothead';

const config = {
  data: myData,
  rows: [{ uniqueName: 'product', caption: 'Product' }],
  columns: [{ uniqueName: 'region', caption: 'Region' }],
  measures: [
    {
      uniqueName: 'sales',
      caption: 'Total Sales',
      aggregation: 'sum',
      format: {
        type: 'currency',
        currency: 'USD',
        locale: 'en-US',
        decimals: 2,
      },
    },
  ],
  // other configuration options...
};

const engine = new PivotEngine(config);
```

### State Management

#### getState()

```typescript
getState(): PivotTableState<T>
```

Returns the current state of the pivot table.

**Example:**

```javascript
const state = engine.getState();
console.log(state.data); // Logs the current data array
console.log(state.sortConfig); // Logs the current sort configuration
```

#### reset()

```typescript
reset(): void
```

Resets the pivot table to its initial state.

**Example:**

```javascript
engine.reset();
const state = engine.getState();
console.log(state); // Logs the initial state
```

### Data Manipulation

#### setMeasures()

```typescript
setMeasures(measureFields: MeasureConfig[]): void
```

Sets the measures for the pivot table.

**Example:**

```javascript
engine.setMeasures([
  {
    uniqueName: 'revenue',
    caption: 'Total Revenue',
    aggregation: 'sum',
    format: {
      type: 'currency',
      currency: 'USD',
      locale: 'en-US',
      decimals: 2,
    },
  },
  {
    uniqueName: 'profit',
    caption: 'Total Profit',
    aggregation: 'sum',
    format: {
      type: 'currency',
      currency: 'USD',
      locale: 'en-US',
      decimals: 2,
    },
  },
]);
```

#### setDimensions()

```typescript
setDimensions(dimensionFields: Dimension[]): void
```

Sets the dimensions for the pivot table.

**Example:**

```javascript
engine.setDimensions([
  { field: 'product', label: 'Product', type: 'string' },
  { field: 'region', label: 'Region', type: 'string' },
  { field: 'date', label: 'Date', type: 'date' },
]);
```

#### setAggregation()

```typescript
setAggregation(type: AggregationType): void
```

Sets the aggregation type for the pivot table.

**Example:**

```javascript
engine.setAggregation('avg'); // Set aggregation to average
```

### Formatting

#### formatValue()

```typescript
formatValue(value: any, field: string): string
```

Formats a value based on the specified field's format configuration.

**Example:**

```javascript
const formattedValue = engine.formatValue(1000, 'sales');
console.log(formattedValue); // "$1,000.00"
```

### Sorting and Grouping

#### sort()

```typescript
sort(field: string, direction: 'asc' | 'desc'): void
```

Sorts the pivot table data.

**Example:**

```javascript
engine.sort('sales', 'desc'); // Sort by sales in descending order
```

#### setGroupConfig()

```typescript
setGroupConfig(groupConfig: GroupConfig | null): void
```

Sets the group configuration for the pivot table.

**Example:**

```javascript
engine.setGroupConfig({
  rowFields: ['product'],
  columnFields: ['region'],
  grouper: (item, fields) => fields.map(field => item[field]).join(' - '),
});
```

#### getGroupedData()

```typescript
getGroupedData(): Group[]
```

Returns the grouped data.

**Example:**

```javascript
const groupedData = engine.getGroupedData();
console.log(groupedData); // Logs the grouped data structure
```

### Row and Column Manipulation

#### resizeRow()

```typescript
resizeRow(index: number, height: number): void
```

Resizes a specific row in the pivot table.

**Example:**

```javascript
engine.resizeRow(2, 50); // Resize row at index 2 to 50px height
```

#### toggleRowExpansion()

```typescript
toggleRowExpansion(rowId: string): void
```

Toggles the expansion state of a row.

**Example:**

```javascript
engine.toggleRowExpansion('product-widget-a'); // Toggle expansion for a specific row
```

#### isRowExpanded()

```typescript
isRowExpanded(rowId: string): boolean
```

Checks if a specific row is expanded.

**Example:**

```javascript
const isExpanded = engine.isRowExpanded('product-widget-a');
console.log(isExpanded); // true or false
```

#### dragRow()

```typescript
dragRow(fromIndex: number, toIndex: number): void
```

Handles dragging a row to a new position.

**Example:**

```javascript
engine.dragRow(3, 5); // Move row from index 3 to index 5
```

#### dragColumn()

```typescript
dragColumn(fromIndex: number, toIndex: number): void
```

Handles dragging a column to a new position.

**Example:**

```javascript
engine.dragColumn(1, 3); // Move column from index 1 to index 3
```

### Filtering and Pagination

#### applyFilters()

```typescript
applyFilters(filters: FilterConfig[]): void
```

Applies filters to the data based on the provided filter configurations.

**Example:**

```javascript
engine.applyFilters([
  {
    field: 'region',
    operator: 'equals',
    value: 'North',
  },
  {
    field: 'sales',
    operator: 'greaterThan',
    value: 500,
  },
]);
```

#### setPagination()

```typescript
setPagination(config: PaginationConfig): void
```

Sets the pagination configuration for the pivot table.

**Example:**

```javascript
engine.setPagination({
  currentPage: 2,
  pageSize: 20,
});
```

#### getFilterState()

```typescript
getFilterState(): FilterConfig[]
```

Returns the current filter configuration.

**Example:**

```javascript
const currentFilters = engine.getFilterState();
console.log(currentFilters); // Array of current filter configurations
```

#### getPaginationState()

```typescript
getPaginationState(): PaginationConfig
```

Returns the current pagination configuration.

**Example:**

```javascript
const paginationInfo = engine.getPaginationState();
console.log(
  `Page ${paginationInfo.currentPage} of ${paginationInfo.totalPages}`
);
```

### Export Features

#### exportToHTML()

```typescript
exportToHTML(fileName?: string): void
```

Exports the pivot table to an HTML file with the given name.

**Example:**

```javascript
// Export with default name 'pivot-table.html'
engine.exportToHTML();

// Export with custom name
engine.exportToHTML('q1-sales-report');
```

#### exportToExcel()

```typescript
exportToExcel(fileName?: string): void
```

Exports the pivot table to an Excel file with the given name.

**Example:**

```javascript
// Export with default name 'pivot-table.xlsx'
engine.exportToExcel();

// Export with custom name
engine.exportToExcel('quarterly-sales-analysis');
```

#### exportToPDF()

```typescript
exportToPDF(fileName?: string): void
```

Exports the pivot table to a PDF file with the given name.

**Example:**

```javascript
// Export with default name 'pivot-table.pdf'
engine.exportToPDF();

// Export with custom name
engine.exportToPDF('sales-presentation');
```

#### openPrintDialog()

```typescript
openPrintDialog(): void
```

Opens the browser's print dialog to print the current pivot table.

**Example:**

```javascript
// Open print dialog to print the pivot table
engine.openPrintDialog();
```

## Configuration Interfaces

### PivotTableConfig

```typescript
interface PivotTableConfig<T> {
  data: T[];
  rows: { uniqueName: string; caption: string }[];
  columns: { uniqueName: string; caption: string }[];
  measures: MeasureConfig[];
  dimensions: Dimension[];
  defaultAggregation?: AggregationType;
  isResponsive?: boolean;
  pageSize?: number;
  groupConfig?: GroupConfig;
  formatting?: Record<string, FormatConfig>;
  conditionalFormatting?: ConditionalFormattingRule[];
  dataSource?: {
    type: 'remote' | 'file';
    url?: string;
    file?: File;
  };
  onRowDragEnd?: (fromIndex: number, toIndex: number, data: T[]) => void;
  onColumnDragEnd?: (
    fromIndex: number,
    toIndex: number,
    columns: Array<{ uniqueName: string; caption: string }>
  ) => void;
}
```

### MeasureConfig

```typescript
interface MeasureConfig {
  uniqueName: string;
  caption: string;
  aggregation: AggregationType;
  format?: FormatConfig;
  formula?: (item: any) => number;
}
```

### Dimension

```typescript
interface Dimension {
  field: string;
  label: string;
  type: 'string' | 'number' | 'date' | 'boolean';
}
```

### FormatConfig

```typescript
interface FormatConfig {
  type: 'number' | 'currency' | 'percentage' | 'date';
  decimals?: number;
  locale?: string;
  currency?: string;
  dateFormat?: string;
}
```

### FilterConfig

```typescript
interface FilterConfig {
  field: string;
  operator: 'equals' | 'contains' | 'greaterThan' | 'lessThan' | 'between';
  value: any;
}
```

### PaginationConfig

```typescript
interface PaginationConfig {
  currentPage: number;
  pageSize: number;
  totalPages?: number; // Read-only, calculated internally
}
```

### GroupConfig

```typescript
interface GroupConfig {
  rowFields: string[];
  columnFields: string[];
  grouper?: (item: any, fields: string[]) => string;
}
```

### ConditionalFormattingRule

```typescript
interface ConditionalFormattingRule {
  value: {
    type: 'Number' | 'Text' | 'Date';
    operator: string;
    value1: string;
    value2?: string;
  };
  format: {
    font?: string;
    size?: string;
    color?: string;
    backgroundColor?: string;
    bold?: boolean;
    italic?: boolean;
    underline?: boolean;
  };
}
```



================================================
FILE: docs/tutorial-basics/core-concepts.md
================================================
---
sidebar_position: 1
title: Core Concepts
description: Understanding the fundamental building blocks of PivotHead
---

# Core Concepts

To effectively use PivotHead, it's important to understand the core concepts and terminology used throughout the library. This page explains the fundamental building blocks that make up a pivot table and how they work together.

## The Anatomy of a Pivot Table

A pivot table consists of several key components:

![Pivot Table Anatomy](https://via.placeholder.com/800x400/e2e8f0/64748b?text=Pivot+Table+Anatomy)

### 1. Data Source

The foundation of any pivot table is the raw data. In PivotHead, this is typically an array of objects, where each object represents a record with multiple fields:

```javascript
const data = [
  {
    date: '2024-01-01',
    product: 'Widget A',
    region: 'North',
    sales: 1000,
    quantity: 50,
  },
  // More records...
];
```

### 2. Dimensions and Measures

Fields in your data are categorized as either dimensions or measures:

#### Dimensions

Dimensions are categorical fields used to organize and group your data. They typically contain text or dates:

- Product names
- Regions/locations
- Time periods
- Categories

In PivotHead, dimensions are defined in the configuration:

```javascript
dimensions: [
  { field: 'product', label: 'Product', type: 'string' },
  { field: 'region', label: 'Region', type: 'string' },
  { field: 'date', label: 'Date', type: 'date' },
],
```

#### Measures

Measures are numeric values that can be calculated or aggregated:

- Sales figures
- Quantities
- Counts
- Percentages

In PivotHead, measures define what values will be calculated and displayed in the cells:

```javascript
measures: [
  {
    uniqueName: 'sales',
    caption: 'Total Sales',
    aggregation: 'sum',
    format: {
      type: 'currency',
      currency: 'USD',
    },
  },
],
```

### 3. Rows and Columns

Rows and columns determine the structure of your pivot table:

- **Rows** define the horizontal organization of your data
- **Columns** define the vertical organization of your data

Both are typically populated with dimension fields:

```javascript
rows: [{ uniqueName: 'product', caption: 'Product' }],
columns: [{ uniqueName: 'region', caption: 'Region' }],
```

With this configuration, products would appear as rows, and regions would appear as columns.

### 4. Cells

The intersection of rows and columns creates cells that display the aggregated measure values:

- Each cell contains the result of applying the specified aggregation function to all records that match the corresponding row and column criteria
- Multiple measures can be displayed in each cell

### 5. Aggregations

Aggregations define how measure values are combined when multiple records share the same row and column dimensions:

- **Sum**: Add all values (most common for sales, revenue, etc.)
- **Average**: Calculate the mean of all values
- **Count**: Count the number of records
- **Min**: Find the smallest value
- **Max**: Find the largest value
- **Custom**: Apply a custom formula or function

```javascript
{
  uniqueName: 'sales',
  caption: 'Total Sales',
  aggregation: 'sum', // Can be 'sum', 'avg', 'count', 'min', 'max', or 'custom'
}
```

## The PivotEngine Class

The `PivotEngine` class is the core of PivotHead. It handles:

1. **Data Processing**: Organizing and aggregating your data
2. **State Management**: Keeping track of the current configuration and user interactions
3. **Calculations**: Performing aggregations and applying formulas
4. **Formatting**: Applying number and date formatting to cells

When you create a new PivotEngine, you provide a configuration object that defines how the pivot table should behave:

```javascript
const engine = new PivotEngine({
  data: yourData,
  rows: [...],
  columns: [...],
  measures: [...],
  dimensions: [...],
  // Additional configuration...
});
```

## Data Flow in PivotHead

Understanding how data flows through PivotHead helps you make better use of its capabilities:

1. **Initial Configuration**: You provide the raw data and configuration to create a PivotEngine
2. **Data Processing**: The engine processes the data according to the configuration
3. **State Generation**: The engine generates a state object containing the structured data
4. **Rendering**: Your application renders the UI based on the state
5. **User Interaction**: Users interact with the UI (sorting, filtering, etc.)
6. **State Updates**: The engine updates its internal state based on user actions
7. **Re-rendering**: Your application re-renders with the updated state

## Grouping and Hierarchies

PivotHead supports hierarchical data through grouping:

```javascript
groupConfig: {
  rowFields: ['category', 'product'], // Creates a hierarchy of category > product
  columnFields: ['year', 'quarter'],  // Creates a hierarchy of year > quarter
  grouper: (item, fields) => fields.map(field => item[field]).join(' - '),
},
```

With this configuration:

- Products would be grouped by category (creating collapsible rows)
- Quarters would be grouped by year (creating collapsible columns)

## Filtering and Sorting

PivotHead provides a flexible system for filtering and sorting your data:

### Filtering

Filters narrow down the data based on specific criteria:

```javascript
engine.applyFilters([
  {
    field: 'region',
    operator: 'equals',
    value: 'North',
  },
  {
    field: 'sales',
    operator: 'greaterThan',
    value: 1000,
  },
]);
```

### Sorting

Sorting arranges data in a specific order:

```javascript
engine.sort('sales', 'desc'); // Sort by sales in descending order
```

## Formatting

PivotHead offers extensive formatting options for presenting your data:

```javascript
format: {
  type: 'currency',
  currency: 'USD',
  locale: 'en-US',
  decimals: 2,
}
```

Available format types:

- `number`: Basic number formatting
- `currency`: Currency values with symbol
- `percent`: Percentage values
- `date`: Date formatting

## Custom Measures and Formulas

One of PivotHead's most powerful features is the ability to create custom measures with formulas:

```javascript
{
  uniqueName: 'profitMargin',
  caption: 'Profit Margin',
  aggregation: 'custom',
  format: {
    type: 'percent',
    decimals: 2,
  },
  formula: item => (item.sales - item.cost) / item.sales,
}
```

This allows you to derive new insights from your existing data without modifying the original dataset.

## Pagination

For large datasets, PivotHead includes built-in pagination:

```javascript
engine.setPagination({
  currentPage: 2,
  pageSize: 25,
});
```

This divides your data into manageable chunks, improving performance and user experience.

## Event Handling

PivotHead provides callbacks for various user interactions:

```javascript
{
  onRowDragEnd: (fromIndex, toIndex, data) => {
    console.log(`Row moved from index ${fromIndex} to ${toIndex}`);
    // Custom logic...
  },
  onColumnDragEnd: (fromIndex, toIndex, columns) => {
    console.log(`Column moved from index ${fromIndex} to ${toIndex}`);
    // Custom logic...
  },
}
```

These callbacks allow you to integrate PivotHead with your application's logic and respond to user actions.

## Summary

Understanding these core concepts will help you make the most of PivotHead:

1. **Dimensions and Measures**: Categorize your fields appropriately
2. **Rows and Columns**: Define the structure of your pivot table
3. **Aggregations**: Choose the right calculation method for your data
4. **PivotEngine**: The central class that coordinates all functionality
5. **Grouping**: Create hierarchical structures in your data
6. **Filtering and Sorting**: Refine your data presentation
7. **Formatting**: Make your data visually meaningful
8. **Custom Measures**: Derive new insights with formulas
9. **Pagination**: Handle large datasets efficiently
10. **Events**: Respond to user interactions

With these concepts in mind, you're ready to build powerful data visualization tools with PivotHead!



================================================
FILE: docs/tutorial-basics/examples.md
================================================
---
sidebar_position: 3
title: Examples & Usage
description: Examples & Usage of PivotHead
---

# Examples

## Basic Pivot Table

This example demonstrates how to create a simple pivot table with products and regions.

```javascript
import { PivotEngine } from '@mindfiredigital/pivothead';

const data = [
  {
    date: '2024-01-01',
    product: 'Widget A',
    region: 'North',
    sales: 1000,
    quantity: 50,
  },
  {
    date: '2024-01-01',
    product: 'Widget B',
    region: 'North',
    sales: 1500,
    quantity: 60,
  },
  {
    date: '2024-01-01',
    product: 'Widget A',
    region: 'South',
    sales: 1200,
    quantity: 55,
  },
  {
    date: '2024-01-01',
    product: 'Widget B',
    region: 'South',
    sales: 1800,
    quantity: 70,
  },
  {
    date: '2024-01-02',
    product: 'Widget A',
    region: 'North',
    sales: 1100,
    quantity: 52,
  },
  {
    date: '2024-01-02',
    product: 'Widget B',
    region: 'North',
    sales: 1600,
    quantity: 62,
  },
  {
    date: '2024-01-02',
    product: 'Widget A',
    region: 'South',
    sales: 1300,
    quantity: 58,
  },
  {
    date: '2024-01-02',
    product: 'Widget B',
    region: 'South',
    sales: 1900,
    quantity: 72,
  },
];

const config = {
  data: data,
  rows: [{ uniqueName: 'product', caption: 'Product' }],
  columns: [{ uniqueName: 'region', caption: 'Region' }],
  measures: [
    {
      uniqueName: 'sales',
      caption: 'Total Sales',
      aggregation: 'sum',
      format: {
        type: 'currency',
        currency: 'USD',
        locale: 'en-US',
        decimals: 2,
      },
    },
  ],
  dimensions: [
    { field: 'product', label: 'Product', type: 'string' },
    { field: 'region', label: 'Region', type: 'string' },
    { field: 'date', label: 'Date', type: 'date' },
    { field: 'sales', label: 'Sales', type: 'number' },
    { field: 'quantity', label: 'Quantity', type: 'number' },
  ],
};

const engine = new PivotEngine(config);
const state = engine.getState();

// Now you can use the state to render your pivot table
console.log(state);

// In a real application, you would render the UI based on this state
```

## Advanced Configuration with Custom Measures

This example shows how to create custom measures using formulas.

```javascript
import { PivotEngine } from '@mindfiredigital/pivothead';

const data = [
  // ... your data array
];

const config = {
  data: data,
  rows: [{ uniqueName: 'product', caption: 'Product' }],
  columns: [{ uniqueName: 'region', caption: 'Region' }],
  measures: [
    {
      uniqueName: 'sales',
      caption: 'Total Sales',
      aggregation: 'sum',
      format: {
        type: 'currency',
        currency: 'USD',
        locale: 'en-US',
        decimals: 2,
      },
    },
    {
      uniqueName: 'quantity',
      caption: 'Total Quantity',
      aggregation: 'sum',
      format: {
        type: 'number',
        decimals: 0,
        locale: 'en-US',
      },
    },
    {
      uniqueName: 'averageSale',
      caption: 'Average Sale Price',
      aggregation: 'custom',
      format: {
        type: 'currency',
        currency: 'USD',
        locale: 'en-US',
        decimals: 2,
      },
      formula: item => item.sales / item.quantity,
    },
    {
      uniqueName: 'profitMargin',
      caption: 'Profit Margin (%)',
      aggregation: 'custom',
      format: {
        type: 'percentage',
        decimals: 1,
        locale: 'en-US',
      },
      formula: item => ((item.sales - item.quantity * 10) / item.sales) * 100,
    },
  ],
  dimensions: [
    // ... your dimensions
  ],
};

const engine = new PivotEngine(config);
```

## Filtering and Pagination

This example demonstrates how to apply filters and pagination to your pivot table.

```javascript
import { PivotEngine } from '@mindfiredigital/pivothead';

// Initialize with your data and configuration
const engine = new PivotEngine(config);

// Apply filters to show only data for the North region with sales greater than 1000
engine.applyFilters([
  {
    field: 'region',
    operator: 'equals',
    value: 'North',
  },
  {
    field: 'sales',
    operator: 'greaterThan',
    value: 1000,
  },
]);

// Set up pagination to show 10 items per page and view the first page
engine.setPagination({
  currentPage: 1,
  pageSize: 10,
});

// Get the current state with applied filters and pagination
const filteredState = engine.getState();
console.log(filteredState);

// Get pagination information
const paginationInfo = engine.getPaginationState();
console.log(
  `Showing page ${paginationInfo.currentPage} of ${paginationInfo.totalPages}`
);
```

## Conditional Formatting

This example shows how to apply conditional formatting to highlight cells based on their values.

```javascript
import { PivotEngine } from '@mindfiredigital/pivothead';

const config = {
  // ... other configuration options
  conditionalFormatting: [
    {
      value: {
        type: 'Number',
        operator: 'Greater than',
        value1: '1500',
        value2: '',
      },
      format: {
        font: 'Arial',
        size: '14px',
        color: '#ffffff',
        backgroundColor: '#4CAF50', // Green background for high values
        bold: true,
      },
    },
    {
      value: {
        type: 'Number',
        operator: 'Less than',
        value1: '1000',
        value2: '',
      },
      format: {
        font: 'Arial',
        size: '14px',
        color: '#ffffff',
        backgroundColor: '#f44336', // Red background for low values
        bold: true,
      },
    },
  ],
};

const engine = new PivotEngine(config);
```

## Dynamic Configuration Changes

This example demonstrates how to dynamically change the configuration of the pivot table.

```javascript
import { PivotEngine } from '@mindfiredigital/pivothead';

// Initial configuration
const engine = new PivotEngine(initialConfig);

// Function to update the pivot table view
function updatePivotView(viewType) {
  switch (viewType) {
    case 'sales-by-product':
      engine.setMeasures([
        {
          uniqueName: 'sales',
          caption: 'Total Sales',
          aggregation: 'sum',
          format: {
            type: 'currency',
            currency: 'USD',
            locale: 'en-US',
            decimals: 2,
          },
        },
      ]);
      engine.setGroupConfig({
        rowFields: ['product'],
        columnFields: ['region'],
      });
      break;

    case 'quantity-by-date':
      engine.setMeasures([
        {
          uniqueName: 'quantity',
          caption: 'Total Quantity',
          aggregation: 'sum',
          format: {
            type: 'number',
            decimals: 0,
            locale: 'en-US',
          },
        },
      ]);
      engine.setGroupConfig({
        rowFields: ['date'],
        columnFields: ['product'],
      });
      break;

    case 'reset':
      engine.reset();
      break;
  }

  // Get the updated state and re-render your UI
  const state = engine.getState();
  renderPivotTable(state);
}

// Example usage
document.getElementById('view-selector').addEventListener('change', e => {
  updatePivotView(e.target.value);
});
```

## Complete Application Example

This example shows a more complete application with event handlers for user interactions.

```javascript
import { PivotEngine } from '@mindfiredigital/pivothead';

// Sample data
const data = [
  // ... your data array
];

// Initial configuration
const config = {
  data: data,
  rows: [{ uniqueName: 'product', caption: 'Product' }],
  columns: [{ uniqueName: 'region', caption: 'Region' }],
  measures: [
    {
      uniqueName: 'sales',
      caption: 'Total Sales',
      aggregation: 'sum',
      format: {
        type: 'currency',
        currency: 'USD',
        locale: 'en-US',
        decimals: 2,
      },
    },
  ],
  dimensions: [
    { field: 'product', label: 'Product', type: 'string' },
    { field: 'region', label: 'Region', type: 'string' },
    { field: 'date', label: 'Date', type: 'date' },
    { field: 'sales', label: 'Sales', type: 'number' },
    { field: 'quantity', label: 'Quantity', type: 'number' },
  ],
  onRowDragEnd: (fromIndex, toIndex, data) => {
    console.log(`Row moved from ${fromIndex} to ${toIndex}`);
    // You can perform additional actions here
  },
  onColumnDragEnd: (fromIndex, toIndex, columns) => {
    console.log(`Column moved from ${fromIndex} to ${toIndex}`);
    // You can perform additional actions here
  },
};

// Initialize the engine
const engine = new PivotEngine(config);

// Function to render the pivot table
function renderPivotTable(state) {
  // This is a simplified example. In a real application, you would:
  // 1. Create the table structure
  // 2. Populate headers based on state.columns
  // 3. Populate rows based on state.rows and state.data
  // 4. Apply formatting and conditional formatting

  const container = document.getElementById('pivot-container');
  // Clear previous content
  container.innerHTML = '';

  // Create a simple representation for this example
  const table = document.createElement('table');
  table.className = 'pivot-table';

  // Add headers
  const thead = document.createElement('thead');
  const headerRow = document.createElement('tr');

  // Add corner cell
  const cornerCell = document.createElement('th');
  cornerCell.className = 'pivot-corner';
  headerRow.appendChild(cornerCell);

  // Add column headers
  state.columns.forEach(column => {
    const th = document.createElement('th');
    th.textContent = column.caption;
    th.className = 'pivot-column-header';
    headerRow.appendChild(th);
  });

  thead.appendChild(headerRow);
  table.appendChild(thead);

  // Add rows
  const tbody = document.createElement('tbody');
  state.rows.forEach(row => {
    const tr = document.createElement('tr');

    // Add row header
    const rowHeader = document.createElement('th');
    rowHeader.textContent = row.caption;
    rowHeader.className = 'pivot-row-header';
    tr.appendChild(rowHeader);

    // Add data cells
    state.columns.forEach(column => {
      const td = document.createElement('td');
      td.className = 'pivot-cell';

      // Find value for this cell
      const cellValue = state.data.find(
        item =>
          item[row.uniqueName] === row.value &&
          item[column.uniqueName] === column.value
      );

      if (cellValue) {
        td.textContent = engine.formatValue(cellValue.sales, 'sales');
      } else {
        td.textContent = '-';
      }

      tr.appendChild(td);
    });

    tbody.appendChild(tr);
  });

  table.appendChild(tbody);
  container.appendChild(table);
}

// Initial render
renderPivotTable(engine.getState());

// Event handlers for UI controls
document.getElementById('sort-button').addEventListener('click', () => {
  engine.sort('sales', 'desc');
  renderPivotTable(engine.getState());
});

document.getElementById('filter-button').addEventListener('click', () => {
  engine.applyFilters([
    {
      field: 'sales',
      operator: 'greaterThan',
      value: 1000,
    },
  ]);
  renderPivotTable(engine.getState());
});

document.getElementById('reset-button').addEventListener('click', () => {
  engine.reset();
  renderPivotTable(engine.getState());
});

// Pagination controls
document.getElementById('next-page').addEventListener('click', () => {
  const pagination = engine.getPaginationState();
  if (pagination.currentPage < pagination.totalPages) {
    engine.setPagination({
      currentPage: pagination.currentPage + 1,
      pageSize: pagination.pageSize,
    });
    renderPivotTable(engine.getState());
    updatePaginationInfo();
  }
});

document.getElementById('prev-page').addEventListener('click', () => {
  const pagination = engine.getPaginationState();
  if (pagination.currentPage > 1) {
    engine.setPagination({
      currentPage: pagination.currentPage - 1,
      pageSize: pagination.pageSize,
    });
    renderPivotTable(engine.getState());
    updatePaginationInfo();
  }
});

function updatePaginationInfo() {
  const pagination = engine.getPaginationState();
  document.getElementById(
    'pagination-info'
  ).textContent = `Page ${pagination.currentPage} of ${pagination.totalPages}`;
}

// Initial pagination info
updatePaginationInfo();
```

## Getting Started

### Step 1: Installation

First, install the PivotHead library using your package manager:

```bash
pnpm install @mindfiredigital/pivothead
```

### Step 2: Import and Initialize

```javascript
import { PivotEngine } from '@mindfiredigital/pivothead';

// Prepare your data
const data = [
  // Your data array
];

// Create configuration
const config = {
  data: data,
  rows: [{ uniqueName: 'product', caption: 'Product' }],
  columns: [{ uniqueName: 'region', caption: 'Region' }],
  measures: [
    {
      uniqueName: 'sales',
      caption: 'Total Sales',
      aggregation: 'sum',
      format: {
        type: 'currency',
        currency: 'USD',
        locale: 'en-US',
        decimals: 2,
      },
    },
  ],
  dimensions: [
    // Your dimensions
  ],
};

// Initialize engine
const engine = new PivotEngine(config);
```

### Step 3: Render Your Pivot Table

```javascript
// Get the state
const state = engine.getState();

// Render your table using your preferred UI library or vanilla JS
// This will depend on your specific implementation
```

## Working with Measures

Measures are the values you want to analyze in your pivot table. PivotHead supports various aggregation types and custom formulas.

### Basic Measures

```javascript
const measures = [
  {
    uniqueName: 'sales',
    caption: 'Total Sales',
    aggregation: 'sum',
    format: {
      type: 'currency',
      currency: 'USD',
      locale: 'en-US',
      decimals: 2,
    },
  },
  {
    uniqueName: 'quantity',
    caption: 'Total Quantity',
    aggregation: 'sum',
    format: {
      type: 'number',
      decimals: 0,
      locale: 'en-US',
    },
  },
];
```

### Custom Formula Measures

```javascript
const measures = [
  // Basic measures
  // ...
  {
    uniqueName: 'averagePrice',
    caption: 'Average Price',
    aggregation: 'custom',
    format: {
      type: 'currency',
      currency: 'USD',
      locale: 'en-US',
      decimals: 2,
    },
    formula: item => item.sales / item.quantity,
  },
];
```

## Handling User Interactions

### Sorting

```javascript
// Sort by a specific field
sortButton.addEventListener('click', () => {
  engine.sort('sales', 'desc'); // or 'asc'
  renderPivotTable(engine.getState());
});
```

### Filtering

```javascript
// Apply multiple filters
filterButton.addEventListener('click', () => {
  engine.applyFilters([
    {
      field: 'region',
      operator: 'equals',
      value: 'North',
    },
    {
      field: 'date',
      operator: 'greaterThan',
      value: new Date('2024-01-15'),
    },
  ]);
  renderPivotTable(engine.getState());
});

// Clear filters
clearFiltersButton.addEventListener('click', () => {
  engine.applyFilters([]);
  renderPivotTable(engine.getState());
});
```

### Pagination

```javascript
// Setup pagination controls
nextPageButton.addEventListener('click', () => {
  const pagination = engine.getPaginationState();
  if (pagination.currentPage < pagination.totalPages) {
    engine.setPagination({
      currentPage: pagination.currentPage + 1,
      pageSize: pagination.pageSize,
    });
    renderPivotTable(engine.getState());
  }
});

prevPageButton.addEventListener('click', () => {
  const pagination = engine.getPaginationState();
  if (pagination.currentPage > 1) {
    engine.setPagination({
      currentPage: pagination.currentPage - 1,
      pageSize: pagination.pageSize,
    });
    renderPivotTable(engine.getState());
  }
});

// Change page size
pageSizeSelector.addEventListener('change', e => {
  engine.setPagination({
    currentPage: 1,
    pageSize: parseInt(e.target.value),
  });
  renderPivotTable(engine.getState());
});
```

## Advanced Customization

### Conditional Formatting

```javascript
const config = {
  // Other configuration options
  conditionalFormatting: [
    {
      value: {
        type: 'Number',
        operator: 'Greater than',
        value1: '1500',
        value2: '',
      },
      format: {
        backgroundColor: '#e6f7ff', // Light blue for high values
        color: '#0066cc',
        bold: true,
      },
    },
    {
      value: {
        type: 'Number',
        operator: 'Less than',
        value1: '500',
        value2: '',
      },
      format: {
        backgroundColor: '#ffe6e6', // Light red for low values
        color: '#cc0000',
        bold: true,
      },
    },
  ],
};
```

### Working with Events

```javascript
const config = {
  // Other configuration options
  onRowDragEnd: (fromIndex, toIndex, data) => {
    console.log(`Row moved from ${fromIndex} to ${toIndex}`);
    saveUserPreference(
      'rowOrder',
      data.map(item => item.id)
    );
  },
  onColumnDragEnd: (fromIndex, toIndex, columns) => {
    console.log(`Column moved from ${fromIndex} to ${toIndex}`);
    saveUserPreference(
      'columnOrder',
      columns.map(col => col.uniqueName)
    );
  },
};
```



================================================
FILE: docs/tutorial-basics/troubleshooting.md
================================================
---
sidebar_position: 4
title: Troubleshooting
description: Troubleshooting and Best Practices of PivotHead
---

# Troubleshooting and Best Practices

## Best Practices

### Data Structure

For optimal performance, ensure your data:

- Has consistent types for each field
- Is pre-processed where possible
- Uses proper date objects for date fields
- Has unique identifiers for each record

### Performance Optimization

- Apply filters before setting pagination
- Use pagination for large datasets
- Limit the number of dimensions in complex pivot tables
- Consider server-side processing for very large datasets

### UI Integration Tips

- Provide clear UI controls for sorting, filtering, and pagination
- Consider adding export options (CSV, Excel)
- Implement responsive design for mobile users
- Add tooltips for cell values with additional context
- Consider color-coding or other visual cues to highlight important data

## Common Issues

### Performance Problems with Large Datasets

**Symptoms:**

- Slow rendering time
- Browser freezing or becoming unresponsive
- High memory usage

**Solutions:**

- Use pagination to limit the amount of data displayed at once:
  ```javascript
  engine.setPagination({
    currentPage: 1,
    pageSize: 50, // Adjust based on your needs
  });
  ```
- Limit the number of visible columns and rows
- Apply filters to reduce the dataset size:
  ```javascript
  engine.applyFilters([
    {
      field: 'date',
      operator: 'greaterThan',
      value: new Date('2024-01-01'),
    },
  ]);
  ```
- Consider server-side data processing for very large datasets
- Pre-aggregate data when possible



================================================
FILE: src/components/bar-chart.tsx
================================================
// import React, { useEffect, useState, useRef } from 'react';
// import '../css/custom.css';

// const barData = [
//   { label: 'North', value: 35, color: '#f87171' },
//   { label: 'South', value: 25, color: '#fb923c' },
//   { label: 'East', value: 20, color: '#fbbf24' },
//   { label: 'West', value: 30, color: '#a3e635' },
// ];

// export default function AnimatedBarChart() {
//   const [inView, setInView] = useState(false);
//   const ref = useRef(null);

//   useEffect(() => {
//     // Ensure this code runs only in the browser
//     if (typeof window === 'undefined' || !ref.current) {
//       return;
//     }
    
//     const observer = new IntersectionObserver(
//       ([entry]) => {
//         if (entry.isIntersecting) {
//           setInView(true);
//           observer.disconnect();
//         }
//       },
//       {
//         threshold: 0.1,
//       }
//     );

//     observer.observe(ref.current);

//     return () => {
//       observer.disconnect();
//     };
//   }, []);


//   const maxValue = Math.max(...barData.map(d => d.value));

//   return (
//     <div ref={ref} className="chartContainer">
//       <svg viewBox="0 0 400 300" className="chartSvg">
//         {/* Y-axis lines */}
//         {[0, 0.25, 0.5, 0.75, 1].map(tick => (
//           <g key={tick} transform={`translate(0, ${250 - tick * 220})`}>
//             <line x1="40" x2="380" className="gridLine" />
//             <text x="35" y="5" textAnchor="end" className="axisLabel">
//               {tick * maxValue}K
//             </text>
//           </g>
//         ))}

//         {/* Bars */}
//         {barData.map((d, i) => {
//           const barHeight = (d.value / maxValue) * 220;
//           return (
//             <g key={d.label} transform={`translate(${(i * 340 / barData.length) + 65}, 0)`}>
//               <rect
//                 className={inView ? 'barAnimate' : ''}
//                 x="0"
//                 y={250 - barHeight}
//                 width="40"
//                 height={barHeight}
//                 fill={d.color}
//                 style={{ animationDelay: `${i * 150}ms`}}
//               />
//               <text x="20" y="270" textAnchor="middle" className="barLabel">
//                 {d.label}
//               </text>
//             </g>
//           );
//         })}
//          <line x1="40" y1="250" x2="380" y2="250" className="axisLine" />
//       </svg>
//     </div>
//   );
// }



import React, { JSX } from 'react';
import '../css/custom.css';

const barData = [
  { label: 'North', value: 35, color: '#f87171' },
  { label: 'South', value: 25, color: '#fb923c' },
  { label: 'East', value: 20, color: '#fbbf24' },
  { label: 'West', value: 30, color: '#a3e635' },
];

export default function AnimatedBarChart(): JSX.Element {
  const maxValue = Math.max(...barData.map(d => d.value));

  return (
    <div className="chartContainer">
      <svg viewBox="0 0 400 300" className="chartSvg">
        {/* Y-axis lines */}
        {[0, 0.25, 0.5, 0.75, 1].map(tick => (
          <g key={tick} transform={`translate(0, ${250 - tick * 220})`}>
            <line x1="40" x2="380" className="gridLine" />
            <text x="35" y="5" textAnchor="end" className="axisLabel">
              {tick * maxValue}
            </text>
          </g>
        ))}

        {/* Bars */}
        {barData.map((d, i) => {
          const barHeight = (d.value / maxValue) * 220;
          return (
            <g key={d.label} transform={`translate(${(i * 340 / barData.length) + 65}, 0)`}>
              <rect
                className="barAnimate"
                x="0"
                y={250 - barHeight}
                width="40"
                height={barHeight}
                fill={d.color}
                style={{ animationDelay: `${i * 200}ms`}}
              />
              <text x="20" y="270" textAnchor="middle" className="barLabel">
                {d.label}
              </text>
            </g>
          );
        })}
         <line x1="40" y1="250" x2="380" y2="250" className="axisLine" />
      </svg>
    </div>
  );
}




================================================
FILE: src/components/bg-box.tsx
================================================
// "use client";
// import React from "react";
// import { motion } from "motion/react";
// import { cn } from "../lib/utils.ts";

// export const BoxesCore = ({ className, ...rest }: { className?: string }) => {
//   const rows = new Array(150).fill(1);
//   const cols = new Array(100).fill(1);
//   let colors = [
//     "#93c5fd",
//     "#f9a8d4", 
//     "#86efac",
//     "#fde047",
//     "#fca5a5",
//     "#d8b4fe",
//     "#93c5fd",
//     "#a5b4fc",
//     "#c4b5fd",
//   ];
//   const getRandomColor = () => {
//     return colors[Math.floor(Math.random() * colors.length)];
//   };

//   return (
//     <div
//       style={{
//         transform: `translate(-40%,-60%) skewX(-48deg) skewY(14deg) scale(0.675) rotate(0deg) translateZ(0)`,
//       }}
//       className={cn(
//         "boxes-core-container",
//         className,
//       )}
//       {...rest}
//     >
//       {rows.map((_, i) => (
//         <motion.div
//           key={`row` + i}
//           className="boxes-row"
//         >
//           {cols.map((_, j) => (
//             <motion.div
//               whileHover={{
//                 backgroundColor: `${getRandomColor()}`,
//                 transition: { duration: 0 },
//               }}
//               animate={{
//                 transition: { duration: 2 },
//               }}
//               key={`col` + j}
//               className="boxes-col"
//             >
//               {j % 2 === 0 && i % 2 === 0 ? (
//                 <svg
//                   xmlns="http://www.w3.org/2000/svg"
//                   fill="none"
//                   viewBox="0 0 24 24"
//                   strokeWidth="1.5"
//                   stroke="currentColor"
//                   className="boxes-icon"
//                 >
//                   <path
//                     strokeLinecap="round"
//                     strokeLinejoin="round"
//                     d="M12 6v12m6-6H6"
//                   />
//                 </svg>
//               ) : null}
//             </motion.div>
//           ))}
//         </motion.div>
//       ))}
//     </div>
//   );
// };

// export const Boxes = React.memo(BoxesCore);

"use client"
import React from "react"
import { motion } from "motion/react"
import { useColorMode } from "@docusaurus/theme-common"
import { cn } from "../lib/utils.ts"

const lightColors = ["#93c5fd", "#f9a8d4", "#86efac", "#fde047", "#fca5a5", "#d8b4fe", "#a5b4fc", "#c4b5fd"]
const darkColors = ["#be123c", "#4338ca", "#16a34a", "#ca8a04", "#0891b2", "#7e22ce", "#4f46e5", "#c026d3"]

export const BoxesCore = ({ className, ...rest }: { className?: string }) => {
  const { colorMode } = useColorMode()
  const rows = new Array(150).fill(1)
  const cols = new Array(100).fill(1)
  const colors = colorMode === "dark" ? darkColors : lightColors

  const getRandomColor = () => {
    return colors[Math.floor(Math.random() * colors.length)]
  }

  return (
    <div
      style={{
        transform: `translate(-40%,-60%) skewX(-48deg) skewY(14deg) scale(0.675) rotate(0deg) translateZ(0)`,
      }}
      className={cn("boxes-core-container", className)}
      {...rest}
    >
      {rows.map((_, i) => (
        <motion.div key={`row` + i} className="boxes-row">
          {cols.map((_, j) => (
            <motion.div
              whileHover={{
                backgroundColor: `${getRandomColor()}`,
                transition: { duration: 0 },
              }}
              animate={{
                transition: { duration: 2 },
              }}
              key={`col` + j}
              className="boxes-col"
            >
              {j % 2 === 0 && i % 2 === 0 ? (
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" className="boxes-icon">
                  <path strokeLinecap="round" strokeLinejoin="round" d="M12 6v12m6-6H6" />
                </svg>
              ) : null}
            </motion.div>
          ))}
        </motion.div>
      ))}
    </div>
  )
}

export const Boxes = React.memo(BoxesCore)


================================================
FILE: src/components/gradient-text.tsx
================================================
import React, { ReactNode } from 'react';

interface GradientTextProps {
  children: ReactNode;
  className?: string;
  colors?: string[];
  animationSpeed?: number;
  showBorder?: boolean;
}

export default function GradientText({
  children,
  className = '',
  colors = ['#ffaa40', '#9c40ff', '#ffaa40'],
  animationSpeed = 8,
  showBorder = false
}: GradientTextProps) {
  const gradientStyle = {
    backgroundImage: `linear-gradient(to right, ${colors.join(', ')})`,
    backgroundSize: '100% 100%',
    backgroundPosition: '0% 0%'
  };

  return (
    <div
      style={{ position: 'relative' }}
    >
      {showBorder && (
        <div
          className="absolute inset-0 bg-cover z-0 pointer-events-none animate-gradient"
          style={{
            ...gradientStyle,
            backgroundSize: '300% 100%'
          }}
        >
          <div
            className="absolute inset-0 bg-black rounded-[1.25rem] z-[-1]"
            style={{
              width: 'calc(100% - 2px)',
              height: 'calc(100% - 2px)',
              left: '50%',
              top: '50%',
              transform: 'translate(-50%, -50%)'
            }}
          ></div>
        </div>
      )}
      <div
        className={`inline-block relative ${className}`}
        style={{
          ...gradientStyle,
          backgroundClip: 'text',
          WebkitBackgroundClip: 'text',
          color: 'transparent',
          zIndex: 2
        }}
      >
        {children}
      </div>
    </div>
  );
}

// tailwind.config.js
// module.exports = {
//   theme: {
//     extend: {
//       keyframes: {
//         gradient: {
//           '0%': { backgroundPosition: '0% 50%' },
//           '50%': { backgroundPosition: '100% 50%' },
//           '100%': { backgroundPosition: '0% 50%' },
//         },
//       },
//       animation: {
//         gradient: 'gradient 8s linear infinite'
//       },
//     },
//   },
//   plugins: [],
// };



================================================
FILE: src/components/line-chart.tsx
================================================
// // import React, { useEffect, useState, useRef } from 'react';
// // import '../css/custom.css';

// // const lineData = [
// //   { x: 50, y: 200 },
// //   { x: 120, y: 120 },
// //   { x: 190, y: 150 },
// //   { x: 260, y: 80 },
// //   { x: 330, y: 100 },
// // ];

// // function pointsToPath(points) {
// //     if (!points || points.length === 0) return '';
// //     const command = (point, i) => {
// //       if (i === 0) return `M ${point.x} ${point.y}`;
// //       return `L ${point.x} ${point.y}`;
// //     };
// //     return points.map(command).join(' ');
// // }


// // export default function AnimatedLineChart() {
// //   const [inView, setInView] = useState(false);
// //   const ref = useRef(null);
// //   const pathRef = useRef<SVGPathElement | null>(null);

// //   useEffect(() => {
// //     if (typeof window === 'undefined' || !ref.current) return;
    
// //     const observer = new IntersectionObserver(
// //       ([entry]) => {
// //         if (entry.isIntersecting) {
// //           setInView(true);
// //           observer.disconnect();
// //         }
// //       },
// //       {
// //         threshold: 0.1,
// //       }
// //     );

// //     observer.observe(ref.current);
    
// //     return () => {
// //        observer.disconnect();
// //     };
// //   }, []);

// //   useEffect(() => {
// //     if (inView && pathRef.current) {
// //       const length = pathRef.current.getTotalLength();
// //       pathRef.current.style.strokeDasharray = length.toString();
// //       pathRef.current.style.strokeDashoffset = length.toString();
// //     }
// //   }, [inView]);


// //   const pathD = pointsToPath(lineData);

// //   return (
// //     <div ref={ref} className="chartContainer">
// //       <svg viewBox="0 0 400 300" className="chartSvg">
// //          {/* Grid lines */}
// //          {[50, 100, 150, 200, 250].map(y => (
// //           <line key={y} x1="40" y1={y} x2="360" y2={y} className="gridLine"/>
// //         ))}
// //         <path
// //           ref={pathRef}
// //           d={pathD}
// //           fill="none"
// //           stroke="#ef4444"
// //           strokeWidth="3"
// //           className={inView ? 'lineAnimate' : ''}
// //         />
// //         {lineData.map((p, i) => (
// //           <circle
// //             key={i}
// //             cx={p.x}
// //             cy={p.y}
// //             r="5"
// //             fill="var(--ifm-background-color)"
// //             stroke="#ef4444"
// //             strokeWidth="2"
// //             className={inView ? 'dotAnimate' : ''}
// //             style={{ animationDelay: `${i * 200 + 500}ms`}}
// //           />
// //         ))}
// //       </svg>
// //     </div>
// //   );
// // }


// import React from 'react';
// import styles from './AnimatedCharts.module.css';

// const lineData = [
//   { x: 50, y: 200 },
//   { x: 120, y: 120 },
//   { x: 190, y: 150 },
//   { x: 260, y: 80 },
//   { x: 330, y: 100 },
// ];

// function pointsToPath(points: { x: number; y: number }[]): string {
//   if (!points || points.length === 0) return '';
//   const command = (point: { x: number; y: number }, i: number) => {
//     if (i === 0) return `M ${point.x} ${point.y}`;
//     return `L ${point.x} ${point.y}`;
//   };
//   return points.map(command).join(' ');
// }

// export default function AnimatedLineChart(): JSX.Element {
//   const pathD = pointsToPath(lineData);

//   return (
//     <div className={styles.chartContainer}>
//       <svg viewBox="0 0 400 300" className={styles.chartSvg}>
//         {/* Grid lines */}
//         {[50, 100, 150, 200, 250].map(y => (
//           <line key={y} x1="40" y1={y} x2="360" y2={y} className={styles.gridLine} />
//         ))}

//         {/* Gradient Definition for Shimmer Effect */}
//         <defs>
//           <linearGradient id="line-gradient" x1="0%" y1="0%" x2="100%" y2="0%">
//             <stop offset="0%" stopColor="#ef4444" stopOpacity="0" />
//             <stop offset="50%" stopColor="#ef4444" stopOpacity="1" />
//             <stop offset="100%" stopColor="#ef4444" stopOpacity="0" />
//           </linearGradient>
//         </defs>

//         {/* Base Path (background) */}
//         <path
//           d={pathD}
//           fill="none"
//           stroke="#ef4444"
//           strokeOpacity="0.3"
//           strokeWidth="3"
//         />
//         {/* Animated Shimmer Path */}
//         <path
//           d={pathD}
//           fill="none"
//           stroke="url(#line-gradient)"
//           strokeWidth="4"
//           className={styles.lineAnimate}
//         />

//         {/* Data Points */}
//         {lineData.map((p, i) => (
//           <circle
//             key={i}
//             cx={p.x}
//             cy={p.y}
//             r="5"
//             fill="var(--ifm-background-color)"
//             stroke="#ef4444"
//             strokeWidth="2"
//             className={styles.dotAnimate}
//             style={{ animationDelay: `${i * 300}ms` }}
//           />
//         ))}
//       </svg>
//     </div>
//   );
// }



import React from 'react';
import '../css/custom.css';

const lineData = [
  { x: 50, y: 200 },
  { x: 120, y: 120 },
  { x: 190, y: 150 },
  { x: 260, y: 80 },
  { x: 330, y: 100 },
];

function pointsToPath(points: { x: number; y: number }[]): string {
    if (!points || points.length === 0) return '';
    const command = (point: { x: number; y: number }, i: number) => {
      if (i === 0) return `M ${point.x} ${point.y}`;
      return `L ${point.x} ${point.y}`;
    };
    return points.map(command).join(' ');
}


export default function AnimatedLineChart(): React.JSX.Element {
  const pathD = pointsToPath(lineData);

  return (
    <div className="chartContainer">
      <svg viewBox="0 0 400 300" className="chartSvg">
         {/* Grid lines */}
         {[50, 100, 150, 200, 250].map(y => (
          <line key={y} x1="40" y1={y} x2="360" y2={y} className="gridLine"/>
        ))}
         <defs>
          <linearGradient id="line-gradient-shimmer" x1="0%" y1="0%" x2="100%" y2="0%">
            <stop offset="0%" stopColor="#ef4444" stopOpacity="0" />
            <stop offset="50%" stopColor="#ef4444" stopOpacity="1" />
            <stop offset="100%" stopColor="#ef4444" stopOpacity="0" />
          </linearGradient>
        </defs>
        <path
          d={pathD}
          fill="none"
          stroke="#ef4444"
          strokeOpacity="0.3"
          strokeWidth="3"
        />
        <path
          d={pathD}
          fill="none"
          stroke="url(#line-gradient-shimmer)"
          strokeWidth="4"
          className="lineAnimate"
        />
        {lineData.map((p, i) => (
          <circle
            key={i}
            cx={p.x}
            cy={p.y}
            r="5"
            fill="var(--ifm-background-color)"
            stroke="#ef4444"
            strokeWidth="2"
            className="dotAnimate"
            style={{ animationDelay: `${i * 300}ms`}}
          />
        ))}
      </svg>
    </div>
  );
}




================================================
FILE: src/components/morphing-text.tsx
================================================
"use client";

import { useCallback, useEffect, useRef } from "react";

import { cn } from "../lib/utils";
import { useColorMode } from "@docusaurus/theme-common";

const morphTime = 1.5;
const cooldownTime = 0.5;

const useMorphingText = (texts: string[]) => {
  const textIndexRef = useRef(0);
  const morphRef = useRef(0);
  const cooldownRef = useRef(0);
  const timeRef = useRef(new Date());

  const text1Ref = useRef<HTMLSpanElement>(null);
  const text2Ref = useRef<HTMLSpanElement>(null);

  const setStyles = useCallback(
    (fraction: number) => {
      const [current1, current2] = [text1Ref.current, text2Ref.current];
      if (!current1 || !current2) return;

      current2.style.filter = `blur(${Math.min(8 / fraction - 8, 100)}px)`;
      current2.style.opacity = `${Math.pow(fraction, 0.4) * 100}%`;

      const invertedFraction = 1 - fraction;
      current1.style.filter = `blur(${Math.min(
        8 / invertedFraction - 8,
        100,
      )}px)`;
      current1.style.opacity = `${Math.pow(invertedFraction, 0.4) * 100}%`;

      current1.textContent = texts[textIndexRef.current % texts.length];
      current2.textContent = texts[(textIndexRef.current + 1) % texts.length];
    },
    [texts],
  );

  const doMorph = useCallback(() => {
    morphRef.current -= cooldownRef.current;
    cooldownRef.current = 0;

    let fraction = morphRef.current / morphTime;

    if (fraction > 1) {
      cooldownRef.current = cooldownTime;
      fraction = 1;
    }

    setStyles(fraction);

    if (fraction === 1) {
      textIndexRef.current++;
    }
  }, [setStyles]);

  const doCooldown = useCallback(() => {
    morphRef.current = 0;
    const [current1, current2] = [text1Ref.current, text2Ref.current];
    if (current1 && current2) {
      current2.style.filter = "none";
      current2.style.opacity = "100%";
      current1.style.filter = "none";
      current1.style.opacity = "0%";
    }
  }, []);

  useEffect(() => {
    let animationFrameId: number;

    const animate = () => {
      animationFrameId = requestAnimationFrame(animate);

      const newTime = new Date();
      const dt = (newTime.getTime() - timeRef.current.getTime()) / 1000;
      timeRef.current = new Date();

      cooldownRef.current -= dt;

      if (cooldownRef.current <= 0) doMorph();
      else doCooldown();
    };

    animate();
    return () => {
      cancelAnimationFrame(animationFrameId);
    };
  }, [doMorph, doCooldown]);

  return { text1Ref, text2Ref };
};

interface MorphingTextProps {
  className?: string;
  texts: string[];
}

const Texts: React.FC<Pick<MorphingTextProps, "texts">> = ({ texts }) => {
  const { text1Ref, text2Ref } = useMorphingText(texts);
  return (
    <>
      <span
        className="absolute inset-x-0 top-0 m-auto inline-block w-full"
        ref={text1Ref}
      />
      <span
        className="absolute inset-x-0 top-0 m-auto inline-block w-full"
        ref={text2Ref}
      />
    </>
  );
};

const SvgFilters: React.FC = () => (
  <svg
    id="filters"
    className="fixed h-0 w-0"
    preserveAspectRatio="xMidYMid slice"
  >
    <defs>
      <filter id="threshold">
        <feColorMatrix
          in="SourceGraphic"
          type="matrix"
          values="1 0 0 0 0
                  0 1 0 0 0
                  0 0 1 0 0
                  0 0 0 255 -140"
        />
      </filter>
    </defs>
  </svg>
);

export const MorphingText: React.FC<MorphingTextProps> = ({
  texts,
  className,
}) => {
  const { colorMode } = useColorMode();
  return (
    <div
      className={cn(
        "relative mx-auto h-16 w-full max-w-screen-md text-left font-sans text-[20pt] font-bold leading-none [filter:url(#threshold)_blur(0.6px)] md:h-24 lg:text-[6rem]",
        colorMode === "dark" ? "text-white" : "text-slate-900",
        className,
      )}
    >
      <Texts texts={texts} />
      <SvgFilters />
    </div>
  );
};



================================================
FILE: src/components/pie-chart.tsx
================================================
// import React, { useEffect, useState, useRef } from 'react';
// import  '../css/custom.css';

// const pieData = [
//   { label: 'North', value: 40, color: '#f87171' },
//   { label: 'South', value: 25, color: '#fb923c' },
//   { label: 'East', value: 20, color: '#fbbf24' },
//   { label: 'West', value: 15, color: '#a3e635' },
// ];

// export default function AnimatedPieChart() {
//     const [inView, setInView] = useState(false);
//     const ref = useRef(null);
  
//     useEffect(() => {
//       if (typeof window === 'undefined' || !ref.current) return;

//       const observer = new IntersectionObserver(
//         ([entry]) => {
//           if (entry.isIntersecting) {
//             setInView(true);
//             observer.disconnect();
//           }
//         },
//         {
//           threshold: 0.1,
//         }
//       );
  
//       observer.observe(ref.current);
      
//       return () => {
//         observer.disconnect();
//       };
//     }, []);

//     const total = pieData.reduce((sum, item) => sum + item.value, 0);
//     const radius = 80;
//     const circumference = 2 * Math.PI * radius;
//     let accumulatedPercentage = 0;

//   return (
//     <div ref={ref} className="chartContainer pieChartContainer">
//       <svg viewBox="0 0 250 250" className="chartSvg">
//         <g transform="translate(125, 125) rotate(-90)">
//           {pieData.map((d, i) => {
//               const percentage = d.value / total;
//               const dashArray = circumference;
//               const dashOffset = dashArray * (1 - percentage);
//               const rotation = accumulatedPercentage * 360;
//               accumulatedPercentage += percentage;

//               return (
//                 <circle
//                   key={d.label}
//                   r={radius}
//                   cx="0"
//                   cy="0"
//                   fill="transparent"
//                   stroke={d.color}
//                   strokeWidth="30"
//                   strokeDasharray={dashArray}
//                   strokeDashoffset={inView ? dashOffset : dashArray}
//                   transform={`rotate(${rotation})`}
//                   className="pieSlice"
//                   style={{ transitionDelay: `${i * 150}ms` }}
//                 />
//               );
//           })}
//         </g>
//       </svg>
//       <div className="legend">
//         {pieData.map(d => (
//             <div key={d.label} className="legendItem">
//                 <span className="legendColorBox" style={{backgroundColor: d.color}}></span>
//                 <span className="legendText">{d.label}</span>
//             </div>
//         ))}
//       </div>
//     </div>
//   );
// }


import React from 'react';
import '../css/custom.css';

const pieData = [
  { label: 'North', value: 40, color: '#f87171' },
  { label: 'South', value: 25, color: '#fb923c' },
  { label: 'East', value: 20, color: '#fbbf24' },
  { label: 'West', value: 15, color: '#a3e635' },
];

export default function AnimatedPieChart(): React.JSX.Element {
  const total = pieData.reduce((sum, item) => sum + item.value, 0);
  const radius = 80;
  const circumference = 2 * Math.PI * radius;
  let accumulatedPercentage = 0;

  return (
    <div className="chartContainer pieChartContainer">
      <svg viewBox="0 0 250 250" className="chartSvg">
        <g transform="translate(125, 125)">
          <g transform="rotate(-90)" className="pieRotate">
            {pieData.map((d) => {
              const percentage = d.value / total;
              const sliceLength = circumference * percentage;
              // Adjust gap size as needed
              const gapLength = 4;
              const strokeDasharray = `${sliceLength - gapLength} ${circumference - sliceLength + gapLength}`;

              const rotation = accumulatedPercentage * 360;
              accumulatedPercentage += percentage;

              return (
                <circle
                  key={d.label}
                  r={radius}
                  cx="0"
                  cy="0"
                  fill="transparent"
                  stroke={d.color}
                  strokeWidth="30"
                  strokeDasharray={strokeDasharray}
                  strokeDashoffset={0}
                  transform={`rotate(${rotation})`}
                  className="pieSlice"
                />
              );
            })}
          </g>
        </g>
      </svg>
      <div className="legend">
        {pieData.map(d => (
          <div key={d.label} className="legendItem">
            <span className="legendColorBox" style={{ backgroundColor: d.color }}></span>
            <span className="legendText">{d.label}</span>
          </div>
        ))}
      </div>
    </div>
  );
}




================================================
FILE: src/components/ripple.tsx
================================================
import { useRef, useEffect } from 'react';
import { Renderer, Program, Triangle, Mesh } from 'ogl';
import React from "react"

type Props = {
  enableRainbow?: boolean;
  gridColor?: string;
  rippleIntensity?: number;
  gridSize?: number;
  gridThickness?: number;
  fadeDistance?: number;
  vignetteStrength?: number;
  glowIntensity?: number;
  opacity?: number;
  gridRotation?: number;
  mouseInteraction?: boolean;
  mouseInteractionRadius?: number;
};

export const RippleGrid: React.FC<Props> = ({
  enableRainbow = false,
  gridColor = '#ff0000ff',
  rippleIntensity = 0.05,
  gridSize = 10.0,
  gridThickness = 15.0,
  fadeDistance = 1.5,
  vignetteStrength = 2.0,
  glowIntensity = 0.1,
  opacity = 1.0,
  gridRotation = 0,
  mouseInteraction = true,
  mouseInteractionRadius = 1
}) => {
  const containerRef = useRef<HTMLDivElement>(null);
  const mousePositionRef = useRef({ x: 0.5, y: 0.5 });
  const targetMouseRef = useRef({ x: 0.5, y: 0.5 });
  const mouseInfluenceRef = useRef(0);
  const uniformsRef = useRef<any>(null);

  useEffect(() => {
    if (!containerRef.current) return;

    const hexToRgb = (hex: string): [number, number, number] => {
      const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return result
        ? [parseInt(result[1], 16) / 255, parseInt(result[2], 16) / 255, parseInt(result[3], 16) / 255]
        : [1, 1, 1];
    };

    const renderer = new Renderer({
      dpr: Math.min(window.devicePixelRatio, 2),
      alpha: true
    });
    const gl = renderer.gl;
    gl.enable(gl.BLEND);
    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
    gl.canvas.style.width = '100%';
    gl.canvas.style.height = '100%';
    containerRef.current.appendChild(gl.canvas);

    const vert = `
attribute vec2 position;
varying vec2 vUv;
void main() {
    vUv = position * 0.5 + 0.5;
    gl_Position = vec4(position, 0.0, 1.0);
}`;

    const frag = `precision highp float;
uniform float iTime;
uniform vec2 iResolution;
uniform bool enableRainbow;
uniform vec3 gridColor;
uniform float rippleIntensity;
uniform float gridSize;
uniform float gridThickness;
uniform float fadeDistance;
uniform float vignetteStrength;
uniform float glowIntensity;
uniform float opacity;
uniform float gridRotation;
uniform bool mouseInteraction;
uniform vec2 mousePosition;
uniform float mouseInfluence;
uniform float mouseInteractionRadius;
varying vec2 vUv;

float pi = 3.141592;

mat2 rotate(float angle) {
    float s = sin(angle);
    float c = cos(angle);
    return mat2(c, -s, s, c);
}

void main() {
    vec2 uv = vUv * 2.0 - 1.0;
    uv.x *= iResolution.x / iResolution.y;

    if (gridRotation != 0.0) {
        uv = rotate(gridRotation * pi / 180.0) * uv;
    }

    float dist = length(uv);
    float func = sin(pi * (iTime - dist));
    vec2 rippleUv = uv + uv * func * rippleIntensity;

    if (mouseInteraction && mouseInfluence > 0.0) {
        vec2 mouseUv = (mousePosition * 2.0 - 1.0);
        mouseUv.x *= iResolution.x / iResolution.y;
        float mouseDist = length(uv - mouseUv);
        
        float influence = mouseInfluence * exp(-mouseDist * mouseDist / (mouseInteractionRadius * mouseInteractionRadius));
        
        float mouseWave = sin(pi * (iTime * 2.0 - mouseDist * 3.0)) * influence;
        rippleUv += normalize(uv - mouseUv) * mouseWave * rippleIntensity * 0.3;
    }

    vec2 a = sin(gridSize * 0.5 * pi * rippleUv - pi / 2.0);
    vec2 b = abs(a);

    float aaWidth = 0.5;
    vec2 smoothB = vec2(
        smoothstep(0.0, aaWidth, b.x),
        smoothstep(0.0, aaWidth, b.y)
    );

    vec3 color = vec3(0.0);
    color += exp(-gridThickness * smoothB.x * (0.8 + 0.5 * sin(pi * iTime)));
    color += exp(-gridThickness * smoothB.y);
    color += 0.5 * exp(-(gridThickness / 4.0) * sin(smoothB.x));
    color += 0.5 * exp(-(gridThickness / 3.0) * smoothB.y);

    if (glowIntensity > 0.0) {
        color += glowIntensity * exp(-gridThickness * 0.5 * smoothB.x);
        color += glowIntensity * exp(-gridThickness * 0.5 * smoothB.y);
    }

    float ddd = exp(-2.0 * clamp(pow(dist, fadeDistance), 0.0, 1.0));
    
    vec2 vignetteCoords = vUv - 0.5;
    float vignetteDistance = length(vignetteCoords);
    float vignette = 1.0 - pow(vignetteDistance * 2.0, vignetteStrength);
    vignette = clamp(vignette, 0.0, 1.0);
    
    vec3 t;
    if (enableRainbow) {
        t = vec3(
            uv.x * 0.5 + 0.5 * sin(iTime),
            uv.y * 0.5 + 0.5 * cos(iTime),
            pow(cos(iTime), 4.0)
        ) + 0.5;
    } else {
        t = gridColor;
    }

    float finalFade = ddd * vignette;
    float alpha = length(color) * finalFade * opacity;
    gl_FragColor = vec4(color * t * finalFade * opacity, alpha);
}`;

    const uniforms = {
      iTime: { value: 0 },
      iResolution: { value: [1, 1] },
      enableRainbow: { value: enableRainbow },
      gridColor: { value: hexToRgb(gridColor) },
      rippleIntensity: { value: rippleIntensity },
      gridSize: { value: gridSize },
      gridThickness: { value: gridThickness },
      fadeDistance: { value: fadeDistance },
      vignetteStrength: { value: vignetteStrength },
      glowIntensity: { value: glowIntensity },
      opacity: { value: opacity },
      gridRotation: { value: gridRotation },
      mouseInteraction: { value: mouseInteraction },
      mousePosition: { value: [0.5, 0.5] },
      mouseInfluence: { value: 0 },
      mouseInteractionRadius: { value: mouseInteractionRadius }
    };

    uniformsRef.current = uniforms;

    const geometry = new Triangle(gl);
    const program = new Program(gl, { vertex: vert, fragment: frag, uniforms });
    const mesh = new Mesh(gl, { geometry, program });

    const resize = () => {
      const { clientWidth: w, clientHeight: h } = containerRef.current!;
      renderer.setSize(w, h);
      uniforms.iResolution.value = [w, h];
    };

    const handleMouseMove = (e: MouseEvent) => {
      if (!mouseInteraction || !containerRef.current) return;
      const rect = containerRef.current.getBoundingClientRect();
      const x = (e.clientX - rect.left) / rect.width;
      const y = 1.0 - (e.clientY - rect.top) / rect.height;
      targetMouseRef.current = { x, y };
    };

    const handleMouseEnter = () => {
      if (!mouseInteraction) return;
      mouseInfluenceRef.current = 1.0;
    };

    const handleMouseLeave = () => {
      if (!mouseInteraction) return;
      mouseInfluenceRef.current = 0.0;
    };

    window.addEventListener('resize', resize);
    if (mouseInteraction) {
      containerRef.current.addEventListener('mousemove', handleMouseMove);
      containerRef.current.addEventListener('mouseenter', handleMouseEnter);
      containerRef.current.addEventListener('mouseleave', handleMouseLeave);
    }
    resize();

    const render = (t: number) => {
      uniforms.iTime.value = t * 0.001;

      const lerpFactor = 0.1;
      mousePositionRef.current.x += (targetMouseRef.current.x - mousePositionRef.current.x) * lerpFactor;
      mousePositionRef.current.y += (targetMouseRef.current.y - mousePositionRef.current.y) * lerpFactor;

      const currentInfluence = uniforms.mouseInfluence.value;
      const targetInfluence = mouseInfluenceRef.current;
      uniforms.mouseInfluence.value += (targetInfluence - currentInfluence) * 0.05;

      uniforms.mousePosition.value = [mousePositionRef.current.x, mousePositionRef.current.y];

      renderer.render({ scene: mesh });
      requestAnimationFrame(render);
    };

    requestAnimationFrame(render);

    return () => {
      window.removeEventListener('resize', resize);
      if (mouseInteraction && containerRef.current) {
        containerRef.current.removeEventListener('mousemove', handleMouseMove);
        containerRef.current.removeEventListener('mouseenter', handleMouseEnter);
        containerRef.current.removeEventListener('mouseleave', handleMouseLeave);
      }
      renderer.gl.getExtension('WEBGL_lose_context')?.loseContext();
      containerRef.current?.removeChild(gl.canvas);
    };
  }, []);

  useEffect(() => {
    if (!uniformsRef.current) return;

    const hexToRgb = (hex: string): [number, number, number] => {
      const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return result
        ? [parseInt(result[1], 16) / 255, parseInt(result[2], 16) / 255, parseInt(result[3], 16) / 255]
        : [1, 1, 1];
    };

    uniformsRef.current.enableRainbow.value = enableRainbow;
    uniformsRef.current.gridColor.value = hexToRgb(gridColor);
    uniformsRef.current.rippleIntensity.value = rippleIntensity;
    uniformsRef.current.gridSize.value = gridSize;
    uniformsRef.current.gridThickness.value = gridThickness;
    uniformsRef.current.fadeDistance.value = fadeDistance;
    uniformsRef.current.vignetteStrength.value = vignetteStrength;
    uniformsRef.current.glowIntensity.value = glowIntensity;
    uniformsRef.current.opacity.value = opacity;
    uniformsRef.current.gridRotation.value = gridRotation;
    uniformsRef.current.mouseInteraction.value = mouseInteraction;
    uniformsRef.current.mouseInteractionRadius.value = mouseInteractionRadius;
  }, [
    enableRainbow,
    gridColor,
    rippleIntensity,
    gridSize,
    gridThickness,
    fadeDistance,
    vignetteStrength,
    glowIntensity,
    opacity,
    gridRotation,
    mouseInteraction,
    mouseInteractionRadius
  ]);

  return <div ref={containerRef} className="w-full h-full relative overflow-hidden [&_canvas]:block" />;
};


================================================
FILE: src/components/rotating-text.tsx
================================================
import React, { forwardRef, useCallback, useEffect, useImperativeHandle, useMemo, useState } from 'react';
import {
  motion,
  AnimatePresence,
  Transition,
  type VariantLabels,
  type Target,
  type TargetAndTransition
} from 'motion/react';

function cn(...classes: (string | undefined | null | boolean)[]): string {
  return classes.filter(Boolean).join(' ');
}

export interface RotatingTextRef {
  next: () => void;
  previous: () => void;
  jumpTo: (index: number) => void;
  reset: () => void;
}

export interface RotatingTextProps
  extends Omit<
    React.ComponentPropsWithoutRef<typeof motion.span>,
    'children' | 'transition' | 'initial' | 'animate' | 'exit'
  > {
  texts: string[];
  transition?: Transition;
  initial?: boolean | Target | VariantLabels;
  animate?: boolean | VariantLabels | TargetAndTransition;
  exit?: Target | VariantLabels;
  animatePresenceMode?: 'sync' | 'wait';
  animatePresenceInitial?: boolean;
  rotationInterval?: number;
  staggerDuration?: number;
  staggerFrom?: 'first' | 'last' | 'center' | 'random' | number;
  loop?: boolean;
  auto?: boolean;
  splitBy?: string;
  onNext?: (index: number) => void;
  mainClassName?: string;
  splitLevelClassName?: string;
  elementLevelClassName?: string;
}

const RotatingText = forwardRef<RotatingTextRef, RotatingTextProps>(
  (
    {
      texts,
      transition = { type: 'spring', damping: 25, stiffness: 300 },
      initial = { y: '100%', opacity: 0 },
      animate = { y: 0, opacity: 1 },
      exit = { y: '-120%', opacity: 0 },
      animatePresenceMode = 'wait',
      animatePresenceInitial = false,
      rotationInterval = 2000,
      staggerDuration = 0,
      staggerFrom = 'first',
      loop = true,
      auto = true,
      splitBy = 'characters',
      onNext,
      mainClassName,
      splitLevelClassName,
      elementLevelClassName,
      ...rest
    },
    ref
  ) => {
    const [currentTextIndex, setCurrentTextIndex] = useState<number>(0);

    const splitIntoCharacters = (text: string): string[] => {
      if (typeof Intl !== 'undefined' && Intl.Segmenter) {
        const segmenter = new Intl.Segmenter('en', { granularity: 'grapheme' });
        return Array.from(segmenter.segment(text), segment => segment.segment);
      }
      return Array.from(text);
    };

    const elements = useMemo(() => {
      const currentText: string = texts[currentTextIndex];
      if (splitBy === 'characters') {
        const words = currentText.split(' ');
        return words.map((word, i) => ({
          characters: splitIntoCharacters(word),
          needsSpace: i !== words.length - 1
        }));
      }
      if (splitBy === 'words') {
        return currentText.split(' ').map((word, i, arr) => ({
          characters: [word],
          needsSpace: i !== arr.length - 1
        }));
      }
      if (splitBy === 'lines') {
        return currentText.split('\n').map((line, i, arr) => ({
          characters: [line],
          needsSpace: i !== arr.length - 1
        }));
      }

      return currentText.split(splitBy).map((part, i, arr) => ({
        characters: [part],
        needsSpace: i !== arr.length - 1
      }));
    }, [texts, currentTextIndex, splitBy]);

    const getStaggerDelay = useCallback(
      (index: number, totalChars: number): number => {
        const total = totalChars;
        if (staggerFrom === 'first') return index * staggerDuration;
        if (staggerFrom === 'last') return (total - 1 - index) * staggerDuration;
        if (staggerFrom === 'center') {
          const center = Math.floor(total / 2);
          return Math.abs(center - index) * staggerDuration;
        }
        if (staggerFrom === 'random') {
          const randomIndex = Math.floor(Math.random() * total);
          return Math.abs(randomIndex - index) * staggerDuration;
        }
        return Math.abs((staggerFrom as number) - index) * staggerDuration;
      },
      [staggerFrom, staggerDuration]
    );

    const handleIndexChange = useCallback(
      (newIndex: number) => {
        setCurrentTextIndex(newIndex);
        if (onNext) onNext(newIndex);
      },
      [onNext]
    );

    const next = useCallback(() => {
      const nextIndex = currentTextIndex === texts.length - 1 ? (loop ? 0 : currentTextIndex) : currentTextIndex + 1;
      if (nextIndex !== currentTextIndex) {
        handleIndexChange(nextIndex);
      }
    }, [currentTextIndex, texts.length, loop, handleIndexChange]);

    const previous = useCallback(() => {
      const prevIndex = currentTextIndex === 0 ? (loop ? texts.length - 1 : currentTextIndex) : currentTextIndex - 1;
      if (prevIndex !== currentTextIndex) {
        handleIndexChange(prevIndex);
      }
    }, [currentTextIndex, texts.length, loop, handleIndexChange]);

    const jumpTo = useCallback(
      (index: number) => {
        const validIndex = Math.max(0, Math.min(index, texts.length - 1));
        if (validIndex !== currentTextIndex) {
          handleIndexChange(validIndex);
        }
      },
      [texts.length, currentTextIndex, handleIndexChange]
    );

    const reset = useCallback(() => {
      if (currentTextIndex !== 0) {
        handleIndexChange(0);
      }
    }, [currentTextIndex, handleIndexChange]);

    useImperativeHandle(
      ref,
      () => ({
        next,
        previous,
        jumpTo,
        reset
      }),
      [next, previous, jumpTo, reset]
    );

    useEffect(() => {
      if (!auto) return;
      const intervalId = setInterval(next, rotationInterval);
      return () => clearInterval(intervalId);
    }, [next, rotationInterval, auto]);

    return (
      <motion.span
        className={cn('flex flex-wrap whitespace-pre-wrap relative', mainClassName)}
        {...rest}
        layout
        transition={transition}
      >
        <span className="sr-only">{texts[currentTextIndex]}</span>
        <AnimatePresence mode={animatePresenceMode} initial={animatePresenceInitial}>
          <motion.span
            key={currentTextIndex}
            className={cn(splitBy === 'lines' ? 'flex flex-col w-full' : 'flex flex-wrap whitespace-pre-wrap relative')}
            layout
            aria-hidden="true"
          >
            {elements.map((wordObj, wordIndex, array) => {
              const previousCharsCount = array
                .slice(0, wordIndex)
                .reduce((sum, word) => sum + word.characters.length, 0);
              return (
                <span key={wordIndex} className={cn('inline-flex', splitLevelClassName)}>
                  {wordObj.characters.map((char, charIndex) => (
                    <motion.span
                      key={charIndex}
                      initial={initial}
                      animate={animate}
                      exit={exit}
                      transition={{
                        ...transition,
                        delay: getStaggerDelay(
                          previousCharsCount + charIndex,
                          array.reduce((sum, word) => sum + word.characters.length, 0)
                        )
                      }}
                      className={cn('inline-block', elementLevelClassName)}
                    >
                      {char}
                    </motion.span>
                  ))}
                  {wordObj.needsSpace && <span className="whitespace-pre"> </span>}
                </span>
              );
            })}
          </motion.span>
        </AnimatePresence>
      </motion.span>
    );
  }
);

RotatingText.displayName = 'RotatingText';
export default RotatingText;



================================================
FILE: src/components/whiteripple.tsx
================================================
import { useRef, useEffect } from 'react';
import { Renderer, Program, Triangle, Mesh } from 'ogl';
import React from "react"

type Props = {
  enableRainbow?: boolean;
  gridColor?: string;
  rippleIntensity?: number;
  gridSize?: number;
  gridThickness?: number;
  fadeDistance?: number;
  vignetteStrength?: number;
  glowIntensity?: number;
  opacity?: number;
  gridRotation?: number;
  mouseInteraction?: boolean;
  mouseInteractionRadius?: number;
};

export const RippleGrid: React.FC<Props> = ({
  enableRainbow = false,
  gridColor = '#ff0000ff',
  rippleIntensity = 0.05,
  gridSize = 10.0,
  gridThickness = 15.0,
  fadeDistance = 1.5,
  vignetteStrength = 2.0,
  glowIntensity = 0.1,
  opacity = 1.0,
  gridRotation = 0,
  mouseInteraction = true,
  mouseInteractionRadius = 1
}) => {
  const containerRef = useRef<HTMLDivElement>(null);
  const mousePositionRef = useRef({ x: 0.5, y: 0.5 });
  const targetMouseRef = useRef({ x: 0.5, y: 0.5 });
  const mouseInfluenceRef = useRef(0);
  const uniformsRef = useRef<any>(null);

  useEffect(() => {
    if (!containerRef.current) return;

    const hexToRgb = (hex: string): [number, number, number] => {
      const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return result
        ? [parseInt(result[1], 16) / 255, parseInt(result[2], 16) / 255, parseInt(result[3], 16) / 255]
        : [1, 1, 1];
    };

    const renderer = new Renderer({
      dpr: Math.min(window.devicePixelRatio, 2),
      alpha: true
    });
    const gl = renderer.gl;
    gl.enable(gl.BLEND);
    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
    gl.canvas.style.width = '100%';
    gl.canvas.style.height = '100%';
    containerRef.current.appendChild(gl.canvas);

    const vert = `
attribute vec2 position;
varying vec2 vUv;
void main() {
    vUv = position * 0.5 + 0.5;
    gl_Position = vec4(position, 0.0, 1.0);
}`;

    const frag = `precision highp float;
uniform float iTime;
uniform vec2 iResolution;
uniform bool enableRainbow;
uniform vec3 gridColor;
uniform float rippleIntensity;
uniform float gridSize;
uniform float gridThickness;
uniform float fadeDistance;
uniform float vignetteStrength;
uniform float glowIntensity;
uniform float opacity;
uniform float gridRotation;
uniform bool mouseInteraction;
uniform vec2 mousePosition;
uniform float mouseInfluence;
uniform float mouseInteractionRadius;
varying vec2 vUv;

float pi = 3.141592;

mat2 rotate(float angle) {
    float s = sin(angle);
    float c = cos(angle);
    return mat2(c, -s, s, c);
}

void main() {
    vec2 uv = vUv * 2.0 - 1.0;
    uv.x *= iResolution.x / iResolution.y;

    if (gridRotation != 0.0) {
        uv = rotate(gridRotation * pi / 180.0) * uv;
    }

    float dist = length(uv);
    float func = sin(pi * (iTime - dist));
    vec2 rippleUv = uv + uv * func * rippleIntensity;

    if (mouseInteraction && mouseInfluence > 0.0) {
        vec2 mouseUv = (mousePosition * 2.0 - 1.0);
        mouseUv.x *= iResolution.x / iResolution.y;
        float mouseDist = length(uv - mouseUv);
        
        float influence = mouseInfluence * exp(-mouseDist * mouseDist / (mouseInteractionRadius * mouseInteractionRadius));
        
        float mouseWave = sin(pi * (iTime * 2.0 - mouseDist * 3.0)) * influence;
        rippleUv += normalize(uv - mouseUv) * mouseWave * rippleIntensity * 0.3;
    }

    vec2 a = sin(gridSize * 0.5 * pi * rippleUv - pi / 2.0);
    vec2 b = abs(a);

    float aaWidth = 0.5;
    vec2 smoothB = vec2(
        smoothstep(0.0, aaWidth, b.x),
        smoothstep(0.0, aaWidth, b.y)
    );

    vec3 color = vec3(0.0);
    color += exp(-gridThickness * smoothB.x * (0.8 + 0.5 * sin(pi * iTime)));
    color += exp(-gridThickness * smoothB.y);
    color += 0.5 * exp(-(gridThickness / 4.0) * sin(smoothB.x));
    color += 0.5 * exp(-(gridThickness / 3.0) * smoothB.y);

    if (glowIntensity > 0.0) {
        color += glowIntensity * exp(-gridThickness * 0.5 * smoothB.x);
        color += glowIntensity * exp(-gridThickness * 0.5 * smoothB.y);
    }

    float ddd = exp(-2.0 * clamp(pow(dist, fadeDistance), 0.0, 1.0));
    
    vec2 vignetteCoords = vUv - 0.5;
    float vignetteDistance = length(vignetteCoords);
    float vignette = 1.0 - pow(vignetteDistance * 2.0, vignetteStrength);
    vignette = clamp(vignette, 0.0, 1.0);
    
    vec3 t;
    if (enableRainbow) {
        t = vec3(
            uv.x * 0.5 + 0.5 * sin(iTime),
            uv.y * 0.5 + 0.5 * cos(iTime),
            pow(cos(iTime), 4.0)
        ) + 0.5;
    } else {
        t = gridColor;
    }

    float finalFade = ddd * vignette;
    float alpha = length(color) * finalFade * opacity;
    gl_FragColor = vec4(color * t * finalFade * opacity, alpha);
}`;

    const uniforms = {
      iTime: { value: 0 },
      iResolution: { value: [1, 1] },
      enableRainbow: { value: enableRainbow },
      gridColor: { value: hexToRgb(gridColor) },
      rippleIntensity: { value: rippleIntensity },
      gridSize: { value: gridSize },
      gridThickness: { value: gridThickness },
      fadeDistance: { value: fadeDistance },
      vignetteStrength: { value: vignetteStrength },
      glowIntensity: { value: glowIntensity },
      opacity: { value: opacity },
      gridRotation: { value: gridRotation },
      mouseInteraction: { value: mouseInteraction },
      mousePosition: { value: [0.5, 0.5] },
      mouseInfluence: { value: 0 },
      mouseInteractionRadius: { value: mouseInteractionRadius }
    };

    uniformsRef.current = uniforms;

    const geometry = new Triangle(gl);
    const program = new Program(gl, { vertex: vert, fragment: frag, uniforms });
    const mesh = new Mesh(gl, { geometry, program });

    const resize = () => {
      const { clientWidth: w, clientHeight: h } = containerRef.current!;
      renderer.setSize(w, h);
      uniforms.iResolution.value = [w, h];
    };

    const handleMouseMove = (e: MouseEvent) => {
      if (!mouseInteraction || !containerRef.current) return;
      const rect = containerRef.current.getBoundingClientRect();
      const x = (e.clientX - rect.left) / rect.width;
      const y = 1.0 - (e.clientY - rect.top) / rect.height;
      targetMouseRef.current = { x, y };
    };

    const handleMouseEnter = () => {
      if (!mouseInteraction) return;
      mouseInfluenceRef.current = 1.0;
    };

    const handleMouseLeave = () => {
      if (!mouseInteraction) return;
      mouseInfluenceRef.current = 0.0;
    };

    window.addEventListener('resize', resize);
    if (mouseInteraction) {
      containerRef.current.addEventListener('mousemove', handleMouseMove);
      containerRef.current.addEventListener('mouseenter', handleMouseEnter);
      containerRef.current.addEventListener('mouseleave', handleMouseLeave);
    }
    resize();

    const render = (t: number) => {
      uniforms.iTime.value = t * 0.001;

      const lerpFactor = 0.1;
      mousePositionRef.current.x += (targetMouseRef.current.x - mousePositionRef.current.x) * lerpFactor;
      mousePositionRef.current.y += (targetMouseRef.current.y - mousePositionRef.current.y) * lerpFactor;

      const currentInfluence = uniforms.mouseInfluence.value;
      const targetInfluence = mouseInfluenceRef.current;
      uniforms.mouseInfluence.value += (targetInfluence - currentInfluence) * 0.05;

      uniforms.mousePosition.value = [mousePositionRef.current.x, mousePositionRef.current.y];

      renderer.render({ scene: mesh });
      requestAnimationFrame(render);
    };

    requestAnimationFrame(render);

    return () => {
      window.removeEventListener('resize', resize);
      if (mouseInteraction && containerRef.current) {
        containerRef.current.removeEventListener('mousemove', handleMouseMove);
        containerRef.current.removeEventListener('mouseenter', handleMouseEnter);
        containerRef.current.removeEventListener('mouseleave', handleMouseLeave);
      }
      renderer.gl.getExtension('WEBGL_lose_context')?.loseContext();
      containerRef.current?.removeChild(gl.canvas);
    };
  }, []);

  useEffect(() => {
    if (!uniformsRef.current) return;

    const hexToRgb = (hex: string): [number, number, number] => {
      const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return result
        ? [parseInt(result[1], 16) / 255, parseInt(result[2], 16) / 255, parseInt(result[3], 16) / 255]
        : [1, 1, 1];
    };

    uniformsRef.current.enableRainbow.value = enableRainbow;
    uniformsRef.current.gridColor.value = hexToRgb(gridColor);
    uniformsRef.current.rippleIntensity.value = rippleIntensity;
    uniformsRef.current.gridSize.value = gridSize;
    uniformsRef.current.gridThickness.value = gridThickness;
    uniformsRef.current.fadeDistance.value = fadeDistance;
    uniformsRef.current.vignetteStrength.value = vignetteStrength;
    uniformsRef.current.glowIntensity.value = glowIntensity;
    uniformsRef.current.opacity.value = opacity;
    uniformsRef.current.gridRotation.value = gridRotation;
    uniformsRef.current.mouseInteraction.value = mouseInteraction;
    uniformsRef.current.mouseInteractionRadius.value = mouseInteractionRadius;
  }, [
    enableRainbow,
    gridColor,
    rippleIntensity,
    gridSize,
    gridThickness,
    fadeDistance,
    vignetteStrength,
    glowIntensity,
    opacity,
    gridRotation,
    mouseInteraction,
    mouseInteractionRadius
  ]);

  return <div ref={containerRef} className="w-full h-full relative overflow-hidden [&_canvas]:block" style={{ backgroundColor: 'white' }} />;
};


================================================
FILE: src/components/HomepageFeatures/index.js
================================================
// import React from 'react';
// import styles from './styles.module.css';

// const FeatureList = [
//   {
//     title: 'Flexible Data Handling',
//     description:
//       'Powerful data pivoting, aggregation, and grouping by multiple fields for comprehensive data analysis.',
//     icon: (
//       <svg
//         xmlns="http://www.w3.org/2000/svg"
//         fill="none"
//         viewBox="0 0 24 24"
//         stroke="currentColor"
//       >
//         <path
//           strokeLinecap="round"
//           strokeLinejoin="round"
//           strokeWidth={2}
//           d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"
//         />
//       </svg>
//     ),
//   },
//   {
//     title: 'Interactive Experience',
//     description:
//       'Column resizing, drag and drop for rows, and intuitive controls for a smooth user experience.',
//     icon: (
//       <svg
//         xmlns="http://www.w3.org/2000/svg"
//         fill="none"
//         viewBox="0 0 24 24"
//         stroke="currentColor"
//       >
//         <path
//           strokeLinecap="round"
//           strokeLinejoin="round"
//           strokeWidth={2}
//           d="M15 15l-2 5L9 9l11 4-5 2zm0 0l5 5M7.188 2.239l.777 2.897M5.136 7.965l-2.898-.777M13.95 4.05l-2.122 2.122m-5.657 5.656l-2.12 2.122"
//         />
//       </svg>
//     ),
//   },
//   {
//     title: 'Customizable Visualization',
//     description:
//       'Custom measures, formulas, and conditional formatting with responsive design and customizable styling.',
//     icon: (
//       <svg
//         xmlns="http://www.w3.org/2000/svg"
//         fill="none"
//         viewBox="0 0 24 24"
//         stroke="currentColor"
//       >
//         <path
//           strokeLinecap="round"
//           strokeLinejoin="round"
//           strokeWidth={2}
//           d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01"
//         />
//       </svg>
//     ),
//   },
//   {
//     title: 'Multi-Framework Integration',
//     description:
//       'Core engine compatible with React, Vue, Svelte, and Angular wrappers for seamless integration.',
//     icon: (
//       <svg
//         xmlns="http://www.w3.org/2000/svg"
//         fill="none"
//         viewBox="0 0 24 24"
//         stroke="currentColor"
//       >
//         <path
//           strokeLinecap="round"
//           strokeLinejoin="round"
//           strokeWidth={2}
//           d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
//         />
//       </svg>
//     ),
//   },
//   {
//     title: 'Advanced Export & Import',
//     description:
//       'Export to PDF and use local JSON files for pivoting with simple configuration options.',
//     icon: (
//       <svg
//         xmlns="http://www.w3.org/2000/svg"
//         fill="none"
//         viewBox="0 0 24 24"
//         stroke="currentColor"
//       >
//         <path
//           strokeLinecap="round"
//           strokeLinejoin="round"
//           strokeWidth={2}
//           d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4"
//         />
//       </svg>
//     ),
//   },
//   {
//     title: 'Intuitive Controls',
//     description:
//       'Configurable toolbar visibility and comprehensive sorting capabilities for enhanced data exploration.',
//     icon: (
//       <svg
//         xmlns="http://www.w3.org/2000/svg"
//         fill="none"
//         viewBox="0 0 24 24"
//         stroke="currentColor"
//       >
//         <path
//           strokeLinecap="round"
//           strokeLinejoin="round"
//           strokeWidth={2}
//           d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4"
//         />
//       </svg>
//     ),
//   },
// ];

// function Feature({ title, description, icon }) {
//   return (
//     <div className={styles.featureCard}>
//       <div className={styles.featureIcon}>{icon}</div>
//       <h3 className={styles.featureTitle}>{title}</h3>
//       <p className={styles.featureDescription}>{description}</p>
//     </div>
//   );
// }

// export default function HomepageFeatures() {
//   return (
//     <section className={styles.features}>
//       <div className={styles.gridContainer}>
//         {FeatureList.map((props, idx) => (
//           <Feature key={idx} {...props} />
//         ))}
//       </div>
//     </section>
//   );
// }



import React, { useState, useEffect, useRef } from 'react';
import clsx from 'clsx';
import styles from './styles.module.css';

const DatabaseIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><ellipse cx="12" cy="5" rx="9" ry="3"></ellipse><path d="M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"></path><path d="M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"></path></svg>
);
const ZapIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polygon points="13 2 3 14 12 14 11 22 21 10 12 10 13 2"></polygon></svg>
);
const PaletteIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="13.5" cy="6.5" r=".5" fill="currentColor"></circle><circle cx="17.5" cy="10.5" r=".5" fill="currentColor"></circle><circle cx="8.5" cy="7.5" r=".5" fill="currentColor"></circle><circle cx="6.5" cy="12.5" r=".5" fill="currentColor"></circle><path d="M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10c.926 0 1.648-.746 1.648-1.688 0-.437-.18-.835-.477-1.122-.297-.287-.703-.465-1.17-.465-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2c0-.306-.084-.582-.224-.822-.14-.24-.34-.44-.572-.596"></path></svg>
);
const SettingsIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 0 2l-.15.08a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.38a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1 0-2l.15-.08a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"></path><circle cx="12" cy="12" r="3"></circle></svg>
);
const DownloadIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="7 10 12 15 17 10"></polyline><line x1="12" y1="15" x2="12" y2="3"></line></svg>
);
const EyeIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"></path><circle cx="12" cy="12" r="3"></circle></svg>
);
const features = [
  {
    icon: <DatabaseIcon />,
    title: 'Flexible Data Handling',
    description: 'Powerful data pivoting, aggregation, and grouping by multiple fields for comprehensive data analysis.',
  },
  {
    icon: <ZapIcon />,
    title: 'Interactive Experience',
    description: 'Column resizing, drag and drop for rows, and intuitive controls for a smooth user experience.',
  },
  {
    icon: <PaletteIcon />,
    title: 'Customizable Visualization',
    description: 'Custom measures, formulas, and conditional formatting with responsive design and customizable styling.',
  },
  {
    icon: <SettingsIcon />,
    title: 'Multi-Framework Integration',
    description: 'Core engine compatible with React, Vue, Svelte, and Angular wrappers for seamless integration.',
  },
  {
    icon: <DownloadIcon />,
    title: 'Advanced Export & Import',
    description: 'Export to PDF and use local JSON files for pivoting with simple configuration options.',
  },
  {
    icon: <EyeIcon />,
    title: 'Intuitive Controls',
    description: 'Configurable toolbar visibility and comprehensive sorting capabilities for enhanced data exploration.',
  },
];

function Feature({ icon, title, description, index }) {
  const cardRef = useRef(null);
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true);
          observer.unobserve(entry.target);
        }
      },
      {
        threshold: 0.1,
      }
    );

    if (cardRef.current) {
      observer.observe(cardRef.current);
    }

    return () => {
      if (cardRef.current) {
        observer.unobserve(cardRef.current);
      }
    };
  }, []);

  return (
    <div
      ref={cardRef}
      className={clsx(styles.featureCard, isVisible ? styles.featureCardVisible : styles.featureCardHidden)}
      style={{ transitionDelay: `${index * 100}ms` }}
    >
      <div className={styles.featureIconContainer}>
        <div className={styles.featureIcon}>{icon}</div>
      </div>
      <h3 className={styles.featureTitle}>{title}</h3>
      <p className={styles.featureDescription}>{description}</p>
    </div>
  );
}

export default function HomepageFeatures() {
  return (
    <section id="features" className={`${styles.section} ${styles.sectionGray}`}>
      <div className="container">
        <div className={styles.sectionHeader}>
          <h2 className={styles.sectionTitle}>Powerful Features</h2>
          <p className={styles.sectionDescription}>
            Everything you need to create stunning pivot tables and data visualizations
          </p>
        </div>
        <div className={`${styles.grid} ${styles.lgGridCols3} ${styles.mdGridCols2}`}>
          {features.map((props, idx) => (
            <Feature key={idx} {...props} index={idx} />
          ))}
        </div>
      </div>
    </section>
  );
}


================================================
FILE: src/components/HomepageFeatures/styles.module.css
================================================
.section {
  padding: 5rem 0;
}

.sectionGray {
  background-color: #f8fafc; /* slate-50 */
}

[data-theme='dark'] .sectionGray {
  background-color: #0f172a; /* slate-900 */
}

.sectionHeader {
  text-align: center;
  margin-bottom: 4rem;
}
.sectionTitle {
  font-size: 2.25rem;
  font-weight: 700;
  margin-bottom: 1rem;
}
@media (min-width: 640px) {
  .sectionTitle {
    font-size: 2.5rem;
  }
}
.sectionDescription {
  font-size: 1.25rem;
  color: var(--ifm-font-color-base);
  max-width: 48rem;
  margin: 0 auto;
}

.grid {
  display: grid;
  gap: 2rem;
  max-width: 80rem;
  margin: 0 auto;
}
@media (min-width: 768px) {
  .mdGridCols2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
}
@media (min-width: 1024px) {
  .lgGridCols3 {
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }
}

.featureCard {
  padding: 1.5rem;
  border-radius: 0.75rem;
  background-color: white;
  transition: box-shadow 0.3s ease, opacity 0.6s ease-out, transform 0.6s ease-out;
  border: 1px solid #e2e8f0; /* slate-200 */
}

.featureCardHidden {
  opacity: 0;
  transform: translateY(30px);
}

.featureCardVisible {
  opacity: 1;
  transform: translateY(0);
}

.featureCard:hover {
  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1),
    0 4px 6px -2px rgba(0, 0, 0, 0.05);
  transform: translateY(-4px);
}

[data-theme='dark'] .featureCard {
  background-color: #1e293b; /* slate-800 */
  border-color: #334155; /* slate-700 */
}

.featureIconContainer {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 3rem;
  height: 3rem;
  background-color: #fee2e2; /* red-100 */
  border-radius: 0.5rem;
  margin-bottom: 1rem;
}

[data-theme='dark'] .featureIconContainer {
  background-color: rgba(239, 68, 68, 0.1);
}

.featureIcon {
  color: var(--ifm-color-primary);
  width: 1.5rem;
  height: 1.5rem;
}

.featureTitle {
  font-size: 1.125rem;
  font-weight: 600;
  margin-bottom: 0.75rem;
}

.featureDescription {
  color: var(--ifm-font-color-base);
  line-height: 1.625;
}


================================================
FILE: src/css/animate-custom.css
================================================

.chartContainer {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.pieChartContainer {
    gap: 1rem;
}
  
.chartSvg {
    width: 100%;
    height: auto;
    max-height: 250px;
}
  
/* Bar Chart Animation */
.barAnimate {
    animation: growBar 0.8s ease-out forwards;
    transform-origin: bottom;
    transform: scaleY(0);
}

.axisLabel, .barLabel {
    fill: var(--ifm-font-color-base);
}

.gridLine {
    stroke: var(--ifm-color-emphasis-200);
    stroke-width: 1;
    stroke-dasharray: 2, 2;
}

.axisLine {
    stroke: var(--ifm-color-emphasis-300);
    stroke-width: 1;
}
  
@keyframes growBar {
    to {
        transform: scaleY(1);
    }
}
  
/* Line Chart Animation */
.lineAnimate {
    animation: drawLine 1s ease-out forwards;
}
  
@keyframes drawLine {
    to {
        stroke-dashoffset: 0;
    }
}
  
.dotAnimate {
    opacity: 0;
    animation: fadeInDot 0.3s ease-out forwards;
}
  
@keyframes fadeInDot {
    to {
        opacity: 1;
    }
}

/* Pie Chart Animation */
.pieSlice {
    transition: stroke-dashoffset 1s cubic-bezier(0.5, 0, 0.5, 1);
}
  
.legend {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 1rem;
}
  
.legendItem {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
}
  
.legendColorBox {
    width: 1rem;
    height: 1rem;
    border-radius: 0.25rem;
}

.legendText {
    color: var(--ifm-font-color-base);
}



================================================
FILE: src/css/custom.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

/**
 * Any CSS included here will be global.
 * The classic template
 * bundles Infima by default. Infima is a CSS framework designed to
 * work well for content-centric websites.
 */

/* You can override the default Infima variables here. */
:root {
  --ifm-color-primary: #ee1a1a; /* red-500 */
  --ifm-color-primary-dark: #f31c1c; /* red-600 */
  --ifm-color-primary-darker: #b91c1c; /* red-700 */
  --ifm-color-primary-darkest: #991b1b; /* red-800 */
  --ifm-color-primary-light: #f52d2d; /* red-400 */
  --ifm-color-primary-lighter: #ee1a1a; /* red-300 */
  --ifm-color-primary-lightest: #fecaca; /* red-200 */
  --ifm-background-color: #f8fafc;
  --ifm-font-family-base: "Inter", sans-serif;
  --ifm-font-family-monospace: "Fira Code", monospace;
  --ifm-hero-text-color: #1e293b; /* slate-800 */
  --ifm-heading-color: #0f172a; /* slate-900 */
  --ifm-font-color-base: #334155; /* slate-700 */
  --ifm-link-color: #ef4444;
}

/* For readability concerns, you should choose a lighter palette in dark mode. */
[data-theme="dark"] {
  --ifm-color-primary: #f51313; /* red-400 */
  --ifm-color-primary-dark: #ef4444; /* red-500 */
  --ifm-color-primary-darker: #eab308;
  --ifm-color-primary-darkest: #d97706;
  --ifm-color-primary-light: #fca5a5; /* red-300 */
  --ifm-color-primary-lighter: #fecaca; /* red-200 */
  --ifm-color-primary-lightest: #fee2e2; /* red-100 */
  --ifm-background-color: #0f172a; /* slate-900 */
  --ifm-hero-text-color: #cbd5e1; /* slate-300 */
  --ifm-heading-color: #f1f5f9; /* slate-100 */
  --ifm-font-color-base: #94a3b8; /* slate-400 */
  --ifm-link-color: #f87171;
}

.navbar__title {
  color: var(--ifm-color-primary) !important;
}

.navbar {
  position: sticky; /* Makes the navbar stick to the top */
  top: 0;
  width: 100%;
  z-index: 1000; /* Ensures it stays on top of other content */
  backdrop-filter: blur(8px); /* Modern blur effect */
  -webkit-backdrop-filter: blur(8px); /* Safari support */
  border-bottom: 1px solid transparent;
  transition: background-color 0.3s ease, border-color 0.3s ease;
  background-color: transparent;
}


html {
  scroll-behavior: smooth;
}

/* Styling for the Boxes component */
.boxes-core-container {
  @apply absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2;
}
.boxes-row {
  @apply flex h-10 w-fit;
}
.boxes-col {
  @apply relative h-10 w-10 border-r border-t;
}
.boxes-icon {
  @apply pointer-events-none absolute -left-2.5 -top-2.5 h-6 w-6;
}

[data-theme="light"] .boxes-col {
  @apply border-slate-400;
}
[data-theme="light"] .boxes-icon {
  @apply text-slate-300;
}
[data-theme="dark"] .boxes-col {
  @apply border-slate-600;
}
[data-theme="dark"] .boxes-icon {
  @apply text-slate-700;
}

/* Base styling for buttons in Hero section, can be extended with Tailwind */
.btn-base {
  @apply inline-flex items-center justify-center gap-2 rounded-lg px-8 py-4 text-base font-semibold transition-all duration-300;
}

.chartContainer {
  position: relative;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.pieChartContainer {
  gap: 1rem;
}

.chartSvg {
  width: 100%;
  height: auto;
  max-height: 250px;
}

/* --- Bar Chart --- */
@keyframes grow {
  from {
    transform: scaleY(0.1);
  }
  to {
    transform: scaleY(1);
  }
}

.barAnimate {
  transform-origin: bottom;
  animation: grow 1.5s ease-in-out infinite alternate;
}

.axisLabel,
.barLabel {
  fill: var(--ifm-font-color-base);
}

.axisLine,
.gridLine {
  stroke: var(--ifm-color-emphasis-200);
  stroke-width: 1;
  stroke-dasharray: 2, 2;
}

.axisLine {
  stroke: var(--ifm-color-emphasis-300);
  stroke-width: 1;
}

@keyframes growBar {
  to {
    transform: scaleY(1);
  }
}

/* --- Line Chart --- */
@keyframes shimmer {
  0% {
    stroke-dasharray: 200 800;
    stroke-dashoffset: -1000;
  }
  100% {
    stroke-dasharray: 200 800;
    stroke-dashoffset: 1000;
  }
}

@keyframes pulse {
  0%,
  100% {
    transform: scale(1);
    opacity: 1;
  }
  50% {
    transform: scale(1.3);
    opacity: 0.7;
  }
}

.lineAnimate {
  animation: shimmer 4s linear infinite;
}

.dotAnimate {
  transform-origin: center;
  animation: pulse 2.4s ease-in-out infinite;
}

/* --- Pie Chart --- */
@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.pieAnimate {
  transform-origin: center;
  animation: spin 20s linear infinite;
}

.pieSlice {
  transition: transform 0.3s ease-in-out;
}

.pieSlice:hover {
  transform: scale(1.05);
}

.pieChartContainer {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1.5rem;
}

@media (min-width: 768px) {
  .pieChartContainer {
    flex-direction: row;
  }
}

.legend {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.legendItem {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 0.875rem;
}

.legendColorBox {
  width: 1rem;
  height: 1rem;
  border-radius: 0.25rem;
}

.legendText {
  color: var(--ifm-font-color-base);
}

/* Pie Chart Continuous Rotation Animation */
@keyframes rotatePie {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.pieRotate {
  animation: rotatePie 20s linear infinite;
}

/* Modern Developers Section Image Glow Animation */
.dashboard-image-wrapper {
  position: relative;
  display: inline-block; /* Adjust based on your image container */
  padding: 10px; /* Space for the glow */
}

.dashboard-image-wrapper::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  border-radius: 12px; /* Match image border-radius */
  pointer-events: none;
  z-index: -1;
  animation: glowing-border 3s ease-in-out infinite alternate;
  transform: translateZ(0); /* Improve rendering performance */
}

/* Light theme glow color */
[data-theme="light"] .dashboard-image-wrapper::before {
  background: linear-gradient(45deg, #fca5a5, #f87171, #fecaca); /* Red-ish gradient */
  box-shadow: 0 0 15px rgba(252, 165, 165, 0.7), 0 0 30px rgba(248, 113, 113, 0.5);
}

/* Dark theme glow color */
[data-theme="dark"] .dashboard-image-wrapper::before {
  background: linear-gradient(45deg, #be123c, #4338ca, #c026d3); /* More vibrant gradient */
  box-shadow: 0 0 15px rgba(190, 18, 60, 0.7), 0 0 30px rgba(67, 56, 202, 0.5);
}

@keyframes glowing-border {
  0% {
    transform: scale(1);
    opacity: 0.7;
  }
  50% {
    transform: scale(1.03);
    opacity: 1;
  }
  100% {
    transform: scale(1);
    opacity: 0.7;
  }
}


================================================
FILE: src/lib/utils.ts
================================================
import { ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}


================================================
FILE: src/pages/index.js
================================================
"use client"

import { useState, useEffect, useRef } from "react"
import Link from "@docusaurus/Link"
import useDocusaurusContext from "@docusaurus/useDocusaurusContext"
import Layout
 from "@theme/Layout"
import HomepageFeatures from "@site/src/components/HomepageFeatures"
import styles from "./index.module.css"
import React from "react"
import "../css/custom.css"
import { useColorMode } from "@docusaurus/theme-common"
import clsx from "clsx"

import { Boxes } from "../components/bg-box"
import AnimatedBarChart from "../components/bar-chart"
import AnimatedLineChart from "../components/line-chart"
import AnimatedPieChart from "../components/pie-chart"
import { MorphingText } from "../components/morphing-text"


// --- Icon Components ---
const BarChartIcon = () => (
  <svg className={styles.logoIcon} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <line x1="12" y1="20" x2="12" y2="10" />
    <line x1="18" y1="20" x2="18" y2="4" />
    <line x1="6" y1="20" x2="6" y2="16" />
  </svg>
)
const GithubIcon = () => (
  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor"
 strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"></path>
  </svg>
)
const SparklesIcon = () => (
  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="m12 3-1.9 5.8-5.8 1.9 5.8 1.9L12 21l1.9-5.8 5.8-1.9-5.8-1.9z"></path>
  </svg>
)
const PlayIcon = () => (
  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <polygon points="5 3 19 12 5 21 5 3"></polygon>
  </svg>
)
const ArrowRightIcon = () => (
  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <line x1="5" y1="12" x2="19" y2="12"></line>
    <polyline points="12 5 19 12 12 19"></polyline>
  </svg>
)
const ZapIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <polygon points="13 2 3 14 12 14 11 22 21 10
 12 10 13 2"></polygon>
  </svg>
)
const SettingsIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 2.73.73l-.15-.1a2 2 0 0 1 0 2l-.15.08a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l-.15-.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"></path>
    <circle cx="12" cy="12" r="3"></circle>
  </svg>
)
const EyeIcon = () => (
  <svg
 xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"></path>
    <circle cx="12" cy="12" r="3"></circle>
  </svg>
)

const CopyIcon = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
      <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
      <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
  </svg>
);
 const CodeIcon = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
      <polyline points="16 18 22 12 16 6"></polyline>
      <polyline points="8 6 2 12 8 18"></polyline>
  </svg>
);
 function HeroSection() {
  const { colorMode } = useColorMode()

  return (
    <section className={clsx("relative flex w-full flex-col items-center justify-center overflow-hidden", colorMode === "dark" ? "bg-slate-900" : "bg-white")}>
      <div className={clsx("absolute inset-0 z-10 h-full w-full [mask-image:radial-gradient(transparent,white)] pointer-events-none", colorMode === "dark" ? "bg-slate-900" : "bg-white")} />
      <Boxes />
      <div className="relative z-20 mx-auto max-w-7xl px-4 py-20 text-center sm:px-6 lg:px-8 md:py-32">
        {/* Floating Badge */}
        <div className="animate-fade-in-up mb-8">

      <div
            className={clsx(
              "inline-flex items-center rounded-full border px-6 py-2 text-sm font-medium shadow-lg backdrop-blur-sm",
              colorMode === "dark" ? "border-red-200/30 bg-white/10 text-white/90" : "border-red-200 bg-red-50 text-red-700"
            )}
          >
            <span className="relative
 mr-3 flex h-2 w-2">
              <span className="absolute inline-flex h-full w-full animate-ping rounded-full bg-red-500 opacity-75"></span>
              <span className="relative inline-flex h-2 w-2 rounded-full bg-red-500"></span>
            </span>
            Trusted by 10,000+ developers worldwide
          </div>
        </div>

        {/* Main Headline */}
        <div className="animate-fade-in-up-delay mb-8 [animation-delay:200ms]">
          <h1 className={clsx("mb-4 text-4xl font-bold leading-tight sm:text-5xl lg:text-6xl", colorMode === "dark" ?
 "text-white" : "text-slate-900")}>Unlock the Stories Hidden in Your Data</h1>
            <div className="inline-flex item-center backdrop-blur-sm">
                <span className={clsx(
                    "text-5xl font-black sm:text-6xl lg:text-7xl mt-4",
                    colorMode === 'dark' ? 'text-white' : 'text-slate-900'
                )}>
                    Pivot
                </span>
                <div className="ml-0 rounded-2xl  p-4 h-24 sm:h-28 lg:h-32 w-64 sm:w-80 lg:w-60">
                    <MorphingText
                        texts={["Head", "Table", "Grid"]}
                        className="text-xl sm:text-6xl lg:text-7xl"
                    />
                </div>
            </div>
        </div>

        {/* Subtitle */}
        <p className={clsx("animate-fade-in-up-delay mx-auto mb-12 max-w-4xl text-lg leading-relaxed opacity-90 [animation-delay:400ms] sm:text-xl lg:text-2xl", colorMode === "dark" ? "text-slate-300" : "text-slate-600")}>

          PivotHead is a feature-rich JavaScript pivot table library for creating
          <span className="font-semibold text-red-400"> interactive reports</span> inside your app or website.
 Created by industry experts.
        </p>

        {/* CTA Buttons */}
      <div className="animate-fade-in-up-delay mb-16 flex flex-col justify-center gap-6 [animation-delay:600ms] sm:flex-row">
          <Link to="/docs/Installation" className="btn-base group bg-red-600 text-white shadow-lg shadow-red-500/20 hover:bg-red-700 hover:-translate-y-1">
            <SparklesIcon />
            <span>Get Started</span>
            <svg className="h-5 w-5 transition-transform group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">

           <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7l5 5m0 0l-5 5m5-5H6" />
            </svg>
          </Link>
          <Link
            to="#"
            className={clsx(
              "btn-base",

    colorMode === "dark" ? "border border-slate-700 bg-slate-800/50 text-white hover:bg-slate-800 hover:border-slate-600" : "border border-slate-300 bg-slate-100 text-slate-800 hover:bg-slate-200"
            )}
          >
            <PlayIcon />
            <span>View Demo</span>
          </Link>
        </div>

        <div className={clsx(styles.commandContainer)}>

    <button
            className={clsx(styles.commandButton, styles.redGlowButton, "animate-fade-in-up-delay [animation-delay:800ms]")}
            onClick={() => {
              navigator.clipboard.writeText("npm i @mindfiredigital/pivothead")
              // You can add a toast notification here for user feedback
            }}
          >

       <CopyIcon />
            <span>npm i @mindfiredigital/pivothead</span>
          </button>
          <Link to="https://github.com/mindfiredigital/PivotHead" className={clsx(styles.commandButton, styles.redGlowButton, "animate-fade-in-up-delay [animation-delay:900ms]")}>
            <GithubIcon />
            <span>GitHub</span>
          </Link>
        </div>




      {/* Stats */}
        {/* <div className="animate-fade-in-up-delay mx-auto grid max-w-4xl grid-cols-1 gap-8 [animation-delay:800ms] md:grid-cols-3">
          <div
            className={clsx(
              "rounded-xl border p-6 text-center transition-transform duration-300 hover:-translate-y-1 backdrop-blur-sm",
              colorMode === "dark" ?
 "border-white/10 bg-white/5" : "border-slate-200 bg-slate-50"
            )}
          >
            <div className="mb-2 text-3xl font-bold text-red-400 md:text-4xl">10K+</div>
            <div className={clsx(colorMode === "dark" ? "text-slate-400" : "text-slate-500")}>Active Users</div>
          </div>
          <div
            className={clsx(

          "rounded-xl border p-6 text-center transition-transform duration-300 hover:-translate-y-1 backdrop-blur-sm",
              colorMode === "dark" ? "border-white/10 bg-white/5" : "border-slate-200 bg-slate-50"
            )}
          >
            <div className="mb-2 text-3xl font-bold text-red-400 md:text-4xl">99.9%</div>
            <div className={clsx(colorMode === "dark" ? "text-slate-400" : "text-slate-500")}>Uptime</div>

       </div>
          <div
            className={clsx(
              "rounded-xl border p-6 text-center transition-transform duration-300 hover:-translate-y-1 backdrop-blur-sm",
              colorMode === "dark" ?
 "border-white/10 bg-white/5" : "border-slate-200 bg-slate-50"
            )}
          >
            <div className="mb-2 text-3xl font-bold text-red-400 md:text-4xl">500ms</div>
            <div className={clsx(colorMode === "dark" ? "text-slate-400" : "text-slate-500")}>Avg Response</div>
          </div>
        </div> */}
      </div>
    </section>
  )
}

function DataVisualizationSection() {
  return (

    <div className={`${styles.section} ${styles.sectionWhite}`}>
      <div className="container">
        <div className={styles.sectionHeader}>
          <h2 className={styles.sectionTitle}>Interactive Data Visualization</h2>
          <p className={styles.sectionDescription}>Transform your raw data into meaningful insights with our powerful pivot table</p>
        </div>
        <div className={`${styles.grid} ${styles.lgGridCols3} ${styles.mdGridCols2}`}>
          <div className={`${styles.card} ${styles.chartCard}`}>
            <h3
 className={styles.cardTitle}>Sales by Region & Product</h3>
            <p className={styles.cardDescription}>Interactive bar chart showing sales performance</p>
            <div className={styles.chartPlaceholder}>
              {/* <img src="./img/bar-chart.png" alt="Sales by Region Chart" className={styles.chartImage} /> */}
              <AnimatedBarChart />
            </div>
          </div>

      <div className={`${styles.card} ${styles.chartCard} ${styles.chartCardHighlight}`}>
            <h3 className={styles.cardTitle}>Monthly Revenue Trends</h3>
            <p className={styles.cardDescription}>Line chart showing growth over time</p>
            <div className={styles.chartPlaceholder}>
              {/* <img src="./img/line-chart.jpg" alt="Monthly Revenue Chart" className={styles.chartImage} /> */}
              <AnimatedLineChart />

    </div>
          </div>
          <div className={`${styles.card} ${styles.chartCard}`}>
            <h3 className={styles.cardTitle}>Regional Distribution</h3>
            <p className={styles.cardDescription}>Pie chart showing market share by region</p>
            <div className={styles.chartPlaceholder}>
              {/* <img src="./img/pie-chart.jpg" alt="Regional Distribution Chart" className={styles.chartImage} /> */}

        <AnimatedPieChart />
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

function ModernDevelopersSection() {
  const sectionRef = useRef(null)
  const [inView, setInView] = useState(false)

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {

    setInView(true)
          observer.disconnect()
        }
      },
      { threshold: 0.1 } // Trigger when 10% of the element is visible
    )

    if (sectionRef.current) {
      observer.observe(sectionRef.current)
    }

    return () => {
      if (sectionRef.current) {
        observer.unobserve(sectionRef.current)
      }
    }

 }, [])

  return (
    <div ref={sectionRef} className={`${styles.section} ${styles.sectionWhite}`}>
      <div className="container">
        <div className={`${styles.grid} ${styles.lgGridCols2} items-center`}>
          <div className={clsx(styles.modernDevsContent, "transition-all duration-1000", inView ?
 "opacity-100 translate-x-0" : "opacity-0 -translate-x-10")}>
            <h2 className={styles.modernDevsTitle}>Built for Modern Developers</h2>
            <p className={styles.modernDevsDescription}>
              PivotHead is more than just a pivot table component.
 It's a comprehensive data visualization solution designed to handle complex datasets with ease and elegance.
 </p>
            <ul className={styles.benefitList}>
              <li className={styles.benefitItem}>
                <div className={styles.benefitIconContainer}>
                  <ZapIcon className={styles.benefitIcon} />
                </div>
                <span className={styles.benefitText}>High Performance
 Data Processing</span>
              </li>
              <li className={styles.benefitItem}>
                <div className={styles.benefitIconContainer}>
                  <SettingsIcon className={styles.benefitIcon} />
                </div>
                <span
 className={styles.benefitText}>Enterprise-Grade Security</span>
              </li>
              <li className={styles.benefitItem}>
                <div className={styles.benefitIconContainer}>
                  <EyeIcon className={styles.benefitIcon} />
                </div>
                <span
 className={styles.benefitText}>Trusted by 10,000+ Developers</span>
              </li>
            </ul>
          </div>
          <div className={clsx(styles.dashboardImageContainer, "transition-all duration-1000", inView ?
 "opacity-100 translate-x-0" : "opacity-0 translate-x-10")}>
            <div className="dashboard-image-wrapper">
              <img src="./img/modern-data.png" alt="Dashboard Preview" className={styles.dashboardImage} />
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}


function CtaSection() {
  const { colorMode } = useColorMode()

  return (
    <div className={`${styles.section} ${styles.sectionGray}`}>

   <div className="container text--center">

        <h2 className={clsx(styles.ctaTitle, colorMode === "dark" ? "text-white" : "text-slate-900")}>Ready to Transform Your Data?</h2>
        <p className={clsx(styles.ctaDescription, colorMode === "dark" ? "text-slate-300" : "text-slate-600")}>Join thousands of developers who trust PivotHead for their data visualization needs.</p>
        <div className={styles.heroButtons}>
          <Link to="/docs/Installation" className={`${styles.button} ${styles.primaryButton}`}>
            Get Started Now <ArrowRightIcon style={{ marginLeft: "0.5rem"
 }} />
          </Link>
          <Link
            to="/docs/what-is-pivothead"
            className={clsx(
              styles.button,
              styles.secondaryButton,
              colorMode === "dark" ?
 "text-white border-slate-700 hover:bg-slate-800" : "bg-white text-slate-700 border-slate-300 hover:bg-slate-50"
            )}
          >
            View Documentation
          </Link>
        </div>
      </div>
    </div>
  )
}

function Footer() {
  const { siteConfig } = useDocusaurusContext()
  return (
    <footer className={styles.footer}>

 <div className="container">
        <div className={styles.footerGrid}>
          <div>
            <div className={styles.logoContainer} style={{ marginBottom: "1rem" }}>
              <div className={styles.logoIconContainer}>
                <BarChartIcon />
              </div>

     <span className={styles.logoText}>{siteConfig.title}</span>
            </div>
            <p style={{ fontSize: "0.875rem" }}>The most powerful pivot table component for modern web applications.</p>
          </div>
          <div>
            <h3 className={styles.footerTitle}>Product</h3>
            <ul className={styles.footerList}>

          <li>
                <Link to="#features" className={styles.footerLink}>
                  Features
                </Link>
              </li>
              <li>

            <Link to="/docs/what-is-pivothead" className={styles.footerLink}>
                  About
                </Link>
              </li>
              <li>
                <Link to="/docs/what-is-pivothead" className={styles.footerLink}>

                  Documentation
                </Link>
              </li>
            </ul>
          </div>
          <div>
            <h3 className={styles.footerTitle}>Resources</h3>

            <ul className={styles.footerList}>
              <li>
                <Link to="/docs/tutorial-basics/examples" className={styles.footerLink}>
                  Examples
                </Link>
              </li>

             <li>
                <Link to="https://github.com/mindfiredigital/PivotHead" className={styles.footerLink}>
                  Community
                </Link>
              </li>
            </ul>

       </div>
          <div>
            <h3 className={styles.footerTitle}>Company</h3>
            <ul className={styles.footerList}>
              <li>
                <Link to="#" className={styles.footerLink}>
                  About

                </Link>
              </li>
              <li>
                <Link to="#" className={styles.footerLink}>
                  Privacy

 </Link>
              </li>
              <li>
                <Link to="#" className={styles.footerLink}>
                  Terms
                </Link>

 </li>
            </ul>
          </div>
        </div>
        <div className={styles.footerCopyright}>
          © {new Date().getFullYear()} {siteConfig.title}.
 All rights reserved. Built with ❤️ for developers.
        </div>
      </div>
    </footer>
  )
}

export default function Home() {
  return (
    <Layout title={`Interactive Data Visualization Library`} description="A feature-rich JavaScript pivot table library for creating interactive reports inside your app or website. Transform your raw data into meaningful insights.">
      <div>
        <main>

  <HeroSection />
          <DataVisualizationSection />
          <HomepageFeatures />
          <ModernDevelopersSection />
          <CtaSection />
        </main>
        <Footer />
      </div>
    </Layout>
  )
}



================================================
FILE: src/pages/index.module.css
================================================
/**
 * CSS files with the .module.css suffix will be treated as CSS modules
 * and scoped locally.
 */

.page {
  background-color: #f8fafc; /* slate-50 */
}

[data-theme="dark"] .page {
  background-color: #0f172a; /* slate-900 */
}

/* Header Styles */
.header {
  position: sticky;
  top: 0;
  z-index: 50;
  width: 100%;
  border-bottom: 1px solid rgba(0, 0, 0, 0.08);
  background-color: rgba(255, 255, 255, 0.8);
  backdrop-filter: blur(12px);
}

[data-theme="dark"] .header {
  border-bottom: 1px solid rgba(255, 255, 255, 0.08);
  background-color: rgba(15, 23, 42, 0.8);
}

.headerContainer {
  display: flex;
  height: 4rem;
  align-items: center;
  justify-content: space-between;
  max-width: 1280px;
  margin: 0 auto;
  padding: 0 1rem;
}

.logoContainer {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  text-decoration: none;
}

.logoIconContainer {
  display: flex;
  height: 2rem;
  width: 2rem;
  align-items: center;
  justify-content: center;
  border-radius: 0.5rem;
  background-color: var(--ifm-color-primary);
}

.logoIcon {
  height: 1.25rem;
  width: 1.25rem;
  color: white;
}

.logoText {
  font-size: 1.25rem;
  font-weight: 700;
  color: var(--ifm-color-primary);
}

.navLinks {
  display: none;
}

@media (min-width: 768px) {
  .navLinks {
    display: flex;
    align-items: center;
    gap: 2rem;
  }
}

.navLink {
  font-size: 0.875rem;
  font-weight: 500;
  color: #475569; /* slate-600 */
  transition: color 0.2s;
}

.navLink:hover {
  color: var(--ifm-color-primary);
  text-decoration: none;
}

[data-theme="dark"] .navLink {
  color: #cbd5e1; /* slate-300 */
}

/* Hero Section */
.heroSection {
  position: relative;
  overflow: hidden;
  padding: 5rem 0;
  text-align: center;
  /* height: 100vh;
 */
  /* Updated background for network animation */
  background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #0f172a 100%);
}

@media (min-width: 640px) {
  .heroSection {
    padding: 8rem 0;
  }
}

/* Removed old animated background styles and added network canvas styles */
.networkCanvas {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 0;
}

.heroContent {
  position: relative;
  z-index: 1;
  opacity: 0;
  transform: translateY(20px);
  transition: opacity 1s, transform 1s;
}

.heroContentVisible {
  opacity: 1;
  transform: translateY(0);
}

.heroBadge {
  display: inline-flex;
  align-items: center;
  margin-bottom: 1.5rem;
  padding: 0.25rem 0.75rem;
  border: 1px solid rgba(239, 68, 68, 0.3);
  border-radius: 9999px;
  background-color: rgba(239, 68, 68, 0.1);
  color: #ef4444;
  font-size: 0.875rem;
}

.heroBadge svg {
  width: 1rem;
  height: 1rem;
  margin-right: 0.5rem;
}

/* Added gradient text styles */
.gradientText {
  font-size: 2.5rem;
  font-weight: 800;
  margin-bottom: 1.5rem;
  line-height: 1.2;
  /* background: linear-gradient(135deg, #fffefe 0%, #dc2626 25%, #f8f7f7 50%, #dc2626 75%, #ef4444 100%); */
  background-color: white;
  background-size: 200% 200%;
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  animation: gradientAnimation 3s ease infinite;
}

@keyframes gradientAnimation {
  0%,
  100% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
}

@media (min-width: 640px) {
  .gradientText {
    font-size: 3.75rem;
  }
}

.heroTitle {
  font-size: 2.5rem;
  font-weight: 800;
  margin-bottom: 1.5rem;
  line-height: 1.2;
}

@media (min-width: 640px) {
  .heroTitle {
    font-size: 3.75rem;
  }
}

.heroTitle span {
  color: var(--ifm-color-primary);
}

.heroSubtitle {
  font-size: 1.25rem;
  /* Updated text color for dark background */
  color: #cbd5e1;
  margin-bottom: 2rem;
  max-width: 48rem;
  margin-left: auto;
  margin-right: auto;
}

.heroButtons {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  justify-content: center;
  align-items: center;
}

@media (min-width: 640px) {
  .heroButtons {
    flex-direction: row;
  }
}

.button {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 0.75rem 2rem;
  font-size: 1rem;
  font-weight: 600;
  border-radius: 0.5rem;
  border: 1px solid transparent;
  transition: all 0.2s ease-in-out;
  cursor: pointer;
  text-decoration: none !important;
}
.button svg {
  width: 1.25rem;
  height: 1.25rem;
  margin-right: 0.5rem;
}
.primaryButton {
  background-color: var(--ifm-color-primary);
  color: white;
  border-color: var(--ifm-color-primary);
}
.primaryButton:hover {
  background-color: var(--ifm-color-primary-dark);
  border-color: var(--ifm-color-primary-dark);
  color: white;
}
.secondaryButton {
  background-color: transparent;
  /* color: #f1f5f9; <-- REMOVED THIS LINE */
  border-color: #475569;
}
.secondaryButton:hover {
  background-color: #1e293b;
  /* color: #f1f5f9; <-- REMOVED THIS LINE */
}

/* Section Styles */
.section {
  padding: 5rem 0;
}
.sectionWhite {
  background-color: white;
}
[data-theme="dark"] .sectionWhite {
  background-color: #020617; /* slate-950 */
}
.sectionGray {
  background-color: #f8fafc; /* slate-50 */
}
[data-theme="dark"] .sectionGray {
  background-color: #0f172a; /* slate-900 */
}
.sectionDark {
  background-color: #0f172a; /* slate-900 */
}
[data-theme="dark"] .sectionDark {
  background-color: #020617; /* slate-950 */
}

.sectionHeader {
  text-align: center;
  margin-bottom: 4rem;
}
.sectionTitle {
  font-size: 2.25rem;
  font-weight: 700;
  margin-bottom: 1rem;
}
@media (min-width: 640px) {
  .sectionTitle {
    font-size: 2.5rem;
  }
}
.sectionDescription {
  font-size: 1.25rem;
  color: var(--ifm-font-color-base);
  max-width: 48rem;
  margin: 0 auto;
}

.grid {
  display: grid;
  gap: 2rem;
  max-width: 80rem;
  margin: 0 auto;
}
.gridCols1 {
  grid-template-columns: repeat(1, minmax(0, 1fr));
}
@media (min-width: 768px) {
  .mdGridCols2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
}
@media (min-width: 1024px) {
  .lgGridCols2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
  .lgGridCols3 {
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }
}

.card {
  padding: 1.5rem;
  border-radius: 0.75rem;
  background-color: white;
  transition: box-shadow 0.3s, transform 0.3s;
  border: 1px solid #e2e8f0; /* slate-200 */
}
.card:hover {
  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
}
[data-theme="dark"] .card {
  background-color: #1e293b; /* slate-800 */
  border-color: #334155; /* slate-700 */
}

/* Data Visualization Section Styles (UPDATED) */
.chartCard {
  border: 1px solid #e2e8f0; /* slate-200 */
}
.chartCardHighlight {
  border-color: #fecaca; /* red-200 */
}
[data-theme="dark"] .chartCardHighlight {
  border-color: var(--ifm-color-primary);
}

.cardTitle {
  font-size: 1.125rem;
  font-weight: 600;
  margin-bottom: 0.5rem;
}
.cardDescription {
  font-size: 0.875rem;
  color: var(--ifm-font-color-base);
  margin-bottom: 1rem;
}

.chartPlaceholder {
  height: 16rem;
  background-color: transparent; /* Changed */
  border-radius: 0.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0; /* Changed */
}

.chartImage {
  width: 900%;
  height: 100%;
  object-fit: contain;
}

[data-theme="dark"] .chartPlaceholder {
  background-color: transparent; /* Changed */
}

/* Features Section */
.featureCard:hover {
  transform: translateY(-4px);
}
.featureIconContainer {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 3rem;
  height: 3rem;
  background-color: #fee2e2; /* red-100 */
  border-radius: 0.5rem;
  margin-bottom: 1rem;
}
[data-theme="dark"] .featureIconContainer {
  background-color: rgba(239, 68, 68, 0.1);
}
.featureIcon {
  color: var(--ifm-color-primary);
  width: 1.5rem;
  height: 1.5rem;
}
.featureTitle {
  font-size: 1.125rem;
  font-weight: 600;
  margin-bottom: 0.75rem;
}
.featureDescription {
  color: var(--ifm-font-color-base);
  line-height: 1.625;
}

/* Modern Devs Section */
.modernDevsContent {
  display: flex;
  flex-direction: column;
  justify-content: center;
}
.modernDevsTitle {
  font-size: 2.25rem;
  font-weight: 700;
  margin-bottom: 1.5rem;
}
.modernDevsDescription {
  font-size: 1.25rem;
  color: var(--ifm-font-color-base);
  margin-bottom: 2rem;
  line-height: 1.6;
}
.benefitList {
  list-style: none;
  padding-left: 0;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}
.benefitItem {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}
.benefitIconContainer {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 2rem;
  height: 2rem;
  background-color: #fee2e2;
  border-radius: 9999px;
}
[data-theme="dark"] .benefitIconContainer {
  background-color: rgba(239, 68, 68, 0.1);
}
.benefitIcon {
  width: 1rem;
  height: 1rem;
  color: var(--ifm-color-primary);
}
.benefitText {
  font-weight: 500;
}
.dashboardImageContainer {
  position: relative;
}
.dashboardImage {
  width: 100%;
  height: 100%;
  border-radius: 0.75rem;
  box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  background-color: #e2e8f0;
}

/* CTA Section */
.ctaTitle {
  font-size: 2.25rem;
  font-weight: 700;
  margin-bottom: 1rem;
}
.ctaDescription {
  font-size: 1.25rem;
  margin-bottom: 2rem;
  max-width: 48rem;
  margin-left: auto;
  margin-right: auto;
}

/* Footer */
.footer {
  background-color: #f8fafc;
  padding: 3rem 0;
  border-top: 1px solid #e2e8f0;
}
[data-theme="dark"] .footer {
  background-color: #020617;
  border-top-color: #1e293b;
}
.footerGrid {
  display: grid;
  grid-template-columns: repeat(1, 1fr);
  gap: 2rem;
}
@media (min-width: 768px) {
  .footerGrid {
    grid-template-columns: repeat(4, 1fr);
  }
}
.footerTitle {
  font-weight: 600;
  margin-bottom: 1rem;
}
.footerList {
  list-style: none;
  padding: 0;
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}
.footerLink {
  font-size: 0.875rem;
  color: var(--ifm-font-color-base);
  text-decoration: none;
  transition: color 0.2s;
}
.footerLink:hover {
  color: var(--ifm-color-primary);
}
.footerCopyright {
  border-top: 1px solid #e2e8f0;
  margin-top: 2rem;
  padding-top: 2rem;
  text-align: center;
  font-size: 0.875rem;
  color: var(--ifm-font-color-base);
}
[data-theme="dark"] .footerCopyright {
  border-top-color: #1e293b;
}

/* Falling Pivot Table Animation Styles */
.pivotContainer {
  position: absolute;
  top: -400px;
  left: 50%;
  transform: translateX(-50%);
  z-index: 100;
  filter: drop-shadow(0 20px 25px rgba(0, 0, 0, 0.3));
}

.animateFall {
  animation: fallDown 1.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
}

.animateBounceSettle {
  animation: bounceSettle 0.8s ease-out forwards;
  top: 50%;
  transform: translateX(-50%) translateY(-50%);
}

.animateFadeOut {
  animation: fadeOut 0.5s ease-in forwards;
  top: 50%;
  transform: translateX(-50%) translateY(-50%);
}

@keyframes fallDown {
  0% {
    top: -400px;
    transform: translateX(-50%) rotate(-5deg);
  }
  70% {
    top: 45%;
    transform: translateX(-50%) translateY(-50%) rotate(2deg);
  }
  85% {
    top: 52%;
    transform: translateX(-50%) translateY(-50%) rotate(-1deg);
  }
  100% {
    top: 50%;
    transform: translateX(-50%) translateY(-50%) rotate(0deg);
  }
}

@keyframes bounceSettle {
  0% {
    transform: translateX(-50%) translateY(-50%) scale(1);
  }
  50% {
    transform: translateX(-50%) translateY(-50%) scale(1.05);
  }
  100% {
    transform: translateX(-50%) translateY(-50%) scale(1);
  }
}

@keyframes fadeOut {
  0% {
    opacity: 1;
    transform: translateX(-50%) translateY(-50%) scale(1);
  }
  100% {
    opacity: 0;
    transform: translateX(-50%) translateY(-50%) scale(0.9);
  }
}

.pivotTableWrapper {
  background: white;
  border-radius: 12px;
  padding: 20px;
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2);
  border: 1px solid #e2e8f0;
}

.pivotTitle {
  margin: 0 0 16px 0;
  font-size: 18px;
  font-weight: 600;
  color: #1e293b;
  text-align: center;
}

.pivotTable {
  width: 100%;
  border-collapse: collapse;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", sans-serif;
  font-size: 14px;
}

.pivotTable td {
  padding: 8px 12px;
  text-align: center;
  border: 1px solid #e2e8f0;
  background: white;
  transition: background-color 0.2s;
}

.headerRow td {
  background: #f8fafc !important;
  font-weight: 600;
  color: #1e293b;
}

.rowHeader {
  background: #f1f5f9 !important;
  font-weight: 600;
  color: #1e293b;
  text-align: left !important;
}

.totalRow td,
.totalCol {
  background: #fef2f2 !important;
  font-weight: 600;
  color: #dc2626;
}

.cornerCell {
  background: #f8fafc !important;
  color: #64748b;
}

.pivotTable td:hover {
  background: #f0f9ff !important;
}

@media (max-width: 768px) {
  .pivotTable {
    font-size: 12px;
  }

  .pivotTable td {
    padding: 6px 8px;
  }

  .pivotTableWrapper {
    padding: 16px;
    margin: 0 16px;
  }
}


.secondaryButton:hover {
  background-color: #1e293b;
  /* color: #f1f5f9; <-- REMOVED THIS LINE */
}

/* Command Button Section */
.commandContainer {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  justify-content: center;
  align-items: center;
  margin-top: -2rem; /* Pull it closer to the main buttons */
  margin-bottom: 2rem;
}

@media (min-width: 640px) {
  .commandContainer {
    flex-direction: row;
    gap: 1rem;
  }
}

.commandButton {
  display: inline-flex;
  align-items: center;
  gap: 0.75rem;
  padding: 0.5rem 1rem;
  font-size: 0.875rem;
  border-radius: 9999px; /* pill shape */
  border: 1px solid;
  transition: all 0.2s ease-in-out;
  cursor: pointer;
  text-decoration: none !important;
  font-family: var(--ifm-font-family-monospace);
  backdrop-filter: blur(4px);
  -webkit-backdrop-filter: blur(4px);
  animation: commandButtonGlow 4s ease-in-out infinite;
}

.commandButton:hover {
  text-decoration: none;
  transform: translateY(-2px); /* Add a subtle lift effect */
  animation-play-state: paused; /* Pause the glow on hover to use static hover style */
}

/* Light theme hover effects */
[data-theme='light'] .commandButton:hover {
  background-color: #f1f5f9;
  border-color: #94a3b8;
  box-shadow: 0 4px 14px 0 rgba(0, 0, 0, 0.1);
}

/* Dark theme hover effects */
[data-theme='dark'] .commandButton:hover {
  background-color: #1e293b;
  border-color: #475569;
  box-shadow: 0 4px 14px 0 rgba(239, 68, 68, 0.2);
}

.commandButton svg {
  flex-shrink: 0;
}

/* Light theme for command buttons */
[data-theme='light'] .commandButton {
  background-color: rgba(241, 245, 249, 0.7);
  color: #334155;
}

/* Dark theme for command buttons */
[data-theme='dark'] .commandButton {
  background-color: rgba(30, 41, 59, 0.5);
  color: #cbd5e1;
}

/* Added red glow animation */
@keyframes redGlowPulse {
  0% {
    box-shadow: 0 0 5px 2px rgba(239, 68, 68, 0.6);
    border-color: rgba(239, 68, 68, 0.8);
  }
  50% {
    box-shadow: 0 0 15px 5px rgba(239, 68, 68, 1);
    border-color: rgba(239, 68, 68, 1);
  }
  100% {
    box-shadow: 0 0 5px 2px rgba(239, 68, 68, 0.6);
    border-color: rgba(239, 68, 68, 0.8);
  }
}

.redGlowButton {
  animation: redGlowPulse 2s ease-in-out infinite;
  border: 1px solid rgba(239, 68, 68, 0.8) !important;
  box-shadow: 0 0 5px 2px rgba(239, 68, 68, 0.6);
  transition: box-shadow 0.3s ease, border-color 0.3s ease;
}

.redGlowButton:hover {
  box-shadow: 0 0 20px 8px rgba(239, 68, 68, 1);
  border-color: rgba(239, 68, 68, 1) !important;
}



================================================
FILE: src/pages/markdown-page.md
================================================
---
title: Markdown page example
---

# Markdown page example

You don't need React to write simple standalone pages.



================================================
FILE: static/.nojekyll
================================================



================================================
FILE: static/img/pivothead.webp
================================================
[Non-text file]

